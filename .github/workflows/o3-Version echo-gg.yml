name: Build FFmpeg Android ARM32 (Fixed)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

jobs:
  build-ffmpeg-full:
    runs-on: ubuntu-latest
    timeout-minutes: 480

    env:
      ANDROID_API_LEVEL: 21
      ANDROID_ABI: armeabi-v7a
      NDK_VERSION: r25c
      FFMPEG_VERSION: n7.1
      MAKEFLAGS: -j$(nproc)

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android NDK r25c
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: true
        local-cache: false

    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          yasm \
          nasm \
          pkg-config \
          autoconf \
          automake \
          libtool \
          git \
          wget \
          curl \
          cmake \
          ninja-build \
          python3 \
          python3-pip \
          gperf \
          gettext \
          texinfo \
          flex \
          bison \
          ccache

        sudo /usr/sbin/update-ccache-symlinks
        echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc

    - name: Cache External Libraries
      uses: actions/cache@v4
      id: cache-external
      with:
        path: |
          external
          build/external
        key: external-libs-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-v3
        restore-keys: |
          external-libs-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-

    - name: Build External Libraries
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        mkdir -p external build/external
        cd external

        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        mkdir -p $PREFIX/lib $PREFIX/include $PREFIX/lib/pkgconfig

        # Create ALL missing tool symlinks for NDK r25c compatibility
        for tool in strings nm objdump strip readelf as ld; do
          ln -sf llvm-$tool $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-$tool
        done

        # Additional symlinks for configure scripts
        ln -sf $CC $TOOLCHAIN_PATH/bin/arm-linux-androideabi-gcc
        ln -sf $AR $TOOLCHAIN_PATH/bin/arm-linux-androideabi-ar
        ln -sf $RANLIB $TOOLCHAIN_PATH/bin/arm-linux-androideabi-ranlib

        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -static-libgcc -static-libstdc++"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"

        # Additional environment variables for configure scripts
        export NM=$TOOLCHAIN_PATH/bin/llvm-nm
        export STRINGS=$TOOLCHAIN_PATH/bin/llvm-strings
        export OBJDUMP=$TOOLCHAIN_PATH/bin/llvm-objdump

        # Build x264 with NDK r25c compatibility
        echo "Building x264..."
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264

        # Export proper environment for x264 configure
        export NM=$TOOLCHAIN_PATH/bin/llvm-nm
        export STRINGS=$TOOLCHAIN_PATH/bin/llvm-strings
        export OBJDUMP=$TOOLCHAIN_PATH/bin/llvm-objdump

        ./configure \
          --prefix=$PREFIX \
          --host=arm-linux-androideabi \
          --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
          --sysroot=$SYSROOT \
          --enable-static \
          --disable-cli \
          --enable-pic \
          --disable-asm \
          --extra-cflags="-fPIC -DANDROID" \
          --extra-ldflags="-llog -lm"
        make -j$(nproc)
        make install
        cd ..

        # Build x265 with manual pkgconfig file
        echo "Building x265..."
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build/linux
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DENABLE_PIC=ON \
          -DENABLE_ASSEMBLY=OFF \
          ../../source
        make -j$(nproc)
        make install

        # Create x265.pc file manually using echo
        {
          echo "prefix=$PREFIX"
          echo "exec_prefix=\${prefix}"
          echo "libdir=\${exec_prefix}/lib"
          echo "includedir=\${prefix}/include"
          echo ""
          echo "Name: x265"
          echo "Description: H.265/HEVC video encoder"
          echo "Version: 3.5"
          echo "Libs: -L\${libdir} -lx265"
          echo "Libs.private: -lstdc++ -lm -ldl"
          echo "Cflags: -I\${includedir}"
        } > $PREFIX/lib/pkgconfig/x265.pc
        cd ../../..

        # Build libvpx
        echo "Building libvpx..."
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        unset AS ASFLAGS
        export AS=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export ASFLAGS="-c"
        export CROSS=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-

        ./configure \
          --target=armv7-android-gcc \
          --prefix=$PREFIX \
          --disable-shared \
          --enable-static \
          --enable-pic \
          --disable-examples \
          --disable-docs \
          --disable-unit-tests \
          --disable-tools \
          --disable-runtime-cpu-detect \
          --disable-neon-asm \
          --disable-optimizations
        make -j$(nproc)
        make install
        cd ..

        # Build fdk-aac
        echo "Building fdk-aac..."
        git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git
        cd fdk-aac
        ./autogen.sh
        ./configure \
          --host=arm-linux-androideabi \
          --prefix=$PREFIX \
          --disable-shared \
          --enable-static \
          --with-pic
        make -j$(nproc)
        make install
        cd ..

        # Build opus
        echo "Building opus..."
        git clone --depth 1 https://github.com/xiph/opus.git
        cd opus
        ./autogen.sh
        export CFLAGS="$CFLAGS -mfpu=neon -D__ARM_NEON__"
        ./configure \
          --host=arm-linux-androideabi \
          --prefix=$PREFIX \
          --disable-shared \
          --enable-static \
          --disable-doc \
          --disable-extra-programs \
          --enable-fixed-point \
          --disable-intrinsics
        make -j$(nproc)
        make install
        cd ..

        # Build lame with enhanced error checking
        echo "Building lame..."
        if ! wget -q https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz; then
          echo "Failed to download LAME, trying alternative source..."
          wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
        fi
        tar xzf lame-3.100.tar.gz
        cd lame-3.100

        # Patch for Android NDK r25c compatibility
        sed -i 's/lame_init_old/lame_init/g' configure.in || true
        sed -i 's/lame_init_old/lame_init/g' configure || true

        ./configure \
          --host=arm-linux-androideabi \
          --prefix=$PREFIX \
          --disable-shared \
          --enable-static \
          --disable-frontend \
          --disable-decoder \
          --enable-nasm=no \
          CFLAGS="$CFLAGS -DHAVE_CONFIG_H"
        make -j$(nproc)
        make install

        # Verify LAME installation
        if [ -f "$PREFIX/lib/libmp3lame.a" ]; then
          echo "✓ LAME library built successfully"
          ls -la $PREFIX/lib/libmp3lame.a
        else
          echo "✗ LAME library not found!"
          exit 1
        fi
        cd ..

        # Build webp
        echo "Building webp..."
        git clone --depth 1 https://chromium.googlesource.com/webm/libwebp.git
        cd libwebp
        ./autogen.sh
        ./configure \
          --host=arm-linux-androideabi \
          --prefix=$PREFIX \
          --disable-shared \
          --enable-static \
          --disable-gl \
          --disable-sdl \
          --disable-png \
          --disable-jpeg \
          --disable-tiff \
          --disable-gif
        make -j$(nproc)
        make install
        cd ..

        echo "All external libraries built successfully!"
        echo "Final verification:"
        ls -la $PREFIX/lib/
        echo "PKG-config files:"
        ls -la $PREFIX/lib/pkgconfig/

        # Test all libraries are properly linked
        echo "Testing library linkage:"
        for lib in libx264.a libx265.a libvpx.a libfdk-aac.a libopus.a libmp3lame.a libwebp.a; do
          if [ -f "$PREFIX/lib/$lib" ]; then
            echo "✓ $lib: $(du -sh $PREFIX/lib/$lib | cut -f1)"
          else
            echo "✗ $lib: Missing"
          fi
        done

    - name: Clone FFmpeg
      run: |
        git clone --depth 1 --branch ${{ env.FFMPEG_VERSION }} https://git.ffmpeg.org/ffmpeg.git ffmpeg
        cd ffmpeg
        # VERSION file might not exist in all versions
        if [ -f VERSION ]; then
          echo "FFmpeg version: $(cat VERSION)"
        else
          echo "FFmpeg version: ${{ env.FFMPEG_VERSION }}"
        fi

    - name: Create Build Directories
      run: |
        mkdir -p build/armeabi-v7a output/armeabi-v7a logs

    - name: Configure FFmpeg
      working-directory: ffmpeg
      run: |
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export STRIP=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-strip
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"

        echo "=== VERIFYING EXTERNAL LIBRARIES ==="
        ls -la $PREFIX/lib/ || echo "No external libs found"
        ls -la $PREFIX/lib/pkgconfig/ || echo "No pkgconfig files found"

        # Test pkg-config with debug output
        echo "Testing pkg-config..."
        pkg-config --list-all | grep -E "(x264|x265|opus|vpx)" || echo "Some libraries not found in pkg-config"
        pkg-config --exists x264 && echo "✓ x264 found" || echo "✗ x264 missing"
        pkg-config --exists x265 && echo "✓ x265 found" || echo "✗ x265 missing"
        pkg-config --exists opus && echo "✓ opus found" || echo "✗ opus missing"
        pkg-config --exists vpx && echo "✓ vpx found" || echo "✗ vpx missing"

        ./configure \
          --prefix=../build/armeabi-v7a \
          --logfile=../logs/config.log \
          --arch=arm \
          --target-os=android \
          --enable-cross-compile \
          --cc=$CC \
          --cxx=$CXX \
          --strip=$STRIP \
          --ar=$AR \
          --ranlib=$RANLIB \
          --sysroot=$SYSROOT \
          --cpu=armv7-a \
          --extra-cflags="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -O2 -I$PREFIX/include" \
          --extra-ldflags="-Wl,--fix-cortex-a8 -L$PREFIX/lib -L$SYSROOT/usr/lib -static-libgcc -static-libstdc++" \
          --extra-libs="-lmp3lame -lx264 -lx265 -lvpx -lfdk-aac -lopus -lwebp -lm -ldl -llog" \
          --pkg-config-flags="--static" \
          --disable-shared \
          --enable-static \
          --enable-pic \
          --enable-ffmpeg \
          --enable-ffprobe \
          --disable-ffplay \
          --disable-doc \
          --disable-htmlpages \
          --disable-manpages \
          --disable-podpages \
          --disable-txtpages \
          --disable-debug \
          --enable-optimizations \
          --enable-runtime-cpudetect \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libfdk-aac \
          --enable-libopus \
          --enable-libmp3lame \
          --enable-libwebp \
          --enable-gpl \
          --enable-version3 \
          --enable-nonfree \
          --enable-small

    - name: Build FFmpeg
      working-directory: ffmpeg
      run: |
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}

        echo "Building FFmpeg..."
        make -j$(nproc) V=1

        echo "Installing FFmpeg..."
        make install

        echo "Copying binaries..."
        cp ../build/armeabi-v7a/bin/ffmpeg ../output/armeabi-v7a/ || true
        cp ../build/armeabi-v7a/bin/ffprobe ../output/armeabi-v7a/ || true

        # Copy libc++_shared.so from NDK to bundle with binaries
        echo "Copying required shared libraries..."
        mkdir -p ../output/armeabi-v7a/lib
        cp $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/arm-linux-androideabi/libc++_shared.so ../output/armeabi-v7a/lib/ || echo "libc++_shared.so not found in expected location"

        # Alternative location for libc++_shared.so
        find $ANDROID_NDK_HOME -name "libc++_shared.so" -path "*/arm-linux-androideabi/*" -exec cp {} ../output/armeabi-v7a/lib/ \; || echo "Could not find libc++_shared.so"

    - name: Verify and Package
      run: |
        echo "=== BUILD VERIFICATION ==="
        ls -la output/armeabi-v7a/
        ls -la output/armeabi-v7a/lib/ || echo "No lib directory"

        for binary in ffmpeg ffprobe; do
          if [ -f "output/armeabi-v7a/$binary" ]; then
            echo "✓ $binary: $(du -sh output/armeabi-v7a/$binary | cut -f1)"
            file output/armeabi-v7a/$binary
            echo "Dependencies for $binary:"
            readelf -d output/armeabi-v7a/$binary | grep NEEDED || echo "No dynamic dependencies"
          else
            echo "✗ $binary: Not found"
          fi
        done

        mkdir -p release
        cp -r output/armeabi-v7a/* release/ 2>/dev/null || echo "No binaries to copy"

        # Create installation script using echo
        {
          echo '#!/system/bin/sh'
          echo '# FFmpeg Android Installation Script'
          echo ''
          echo '# Set up library path'
          echo 'export LD_LIBRARY_PATH="$(dirname "$0")/lib:$LD_LIBRARY_PATH"'
          echo ''
          echo '# Create symlinks if needed'
          echo 'INSTALL_DIR="/data/local/tmp/ffmpeg"'
          echo 'mkdir -p "$INSTALL_DIR/bin" "$INSTALL_DIR/lib"'
          echo ''
          echo '# Copy binaries'
          echo 'cp "$(dirname "$0")/ffmpeg" "$INSTALL_DIR/bin/" 2>/dev/null'
          echo 'cp "$(dirname "$0")/ffprobe" "$INSTALL_DIR/bin/" 2>/dev/null'
          echo 'cp "$(dirname "$0")"/lib/*.so "$INSTALL_DIR/lib/" 2>/dev/null'
          echo ''
          echo 'chmod 755 "$INSTALL_DIR/bin/ffmpeg" "$INSTALL_DIR/bin/ffprobe"'
          echo ''
          echo 'echo "FFmpeg installed to $INSTALL_DIR"'
          echo 'echo "Add to PATH: export PATH=\"$INSTALL_DIR/bin:\$PATH\""'
          echo 'echo "Add to LD_LIBRARY_PATH: export LD_LIBRARY_PATH=\"$INSTALL_DIR/lib:\$LD_LIBRARY_PATH\""'
        } > release/install.sh

        chmod +x release/install.sh

        # Create build info file using echo
        {
          echo "FFmpeg Android Full Build (Fixed)"
          echo "================================="
          echo "Version: ${{ env.FFMPEG_VERSION }}"
          echo "Target: ${{ env.ANDROID_ABI }}"
          echo "API Level: ${{ env.ANDROID_API_LEVEL }}"
          echo "NDK: ${{ env.NDK_VERSION }}"
          echo "Built: $(date)"
          echo ""
          echo "Features: All major codecs enabled"
          echo "Libraries: x264, x265, vpx, fdk-aac, opus, lame, webp"
          echo ""
          echo "Installation:"
          echo "1. Extract all files to Android device"
          echo "2. Run: sh install.sh"
          echo "3. Or manually set LD_LIBRARY_PATH to lib/ directory"
        } > release/BUILD_INFO.txt

    - name: Test Built Binaries
      run: |
        echo "=== TESTING BINARIES ==="
        if [ -f "output/armeabi-v7a/ffmpeg" ]; then
          echo "Testing ffmpeg..."
          ./output/armeabi-v7a/ffmpeg -version 2>&1 | head -5 || echo "Binary exists but can't run on x86 (expected)"
        else
          echo "No ffmpeg binary found to test"
        fi

        # Verify shared library is included
        if [ -f "output/armeabi-v7a/lib/libc++_shared.so" ]; then
          echo "✓ libc++_shared.so included: $(du -sh output/armeabi-v7a/lib/libc++_shared.so | cut -f1)"
        else
          echo "✗ libc++_shared.so missing - binary may not work on Android"
        fi

    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: logs/
        retention-days: 7

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-android-fixed
        path: |
          release/
        retention-days: 30
        compression-level: 6

    - name: Build Summary
      run: |
        echo "## FFmpeg Android Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.FFMPEG_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ env.ANDROID_ABI }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Level**: ${{ env.ANDROID_API_LEVEL }}+" >> $GITHUB_STEP_SUMMARY

        if [ -f "release/ffmpeg" ]; then
          echo "- **Binary Size**: $(du -sh release/ffmpeg | cut -f1)" >> $GITHUB_STEP_SUMMARY
          if [ -f "release/lib/libc++_shared.so" ]; then
            echo "- **Status**: ✅ Success (with required libraries)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ⚠️ Success (missing libc++_shared.so)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Status**: ❌ Build completed but no binaries found" >> $GITHUB_STEP_SUMMARY
        fi
