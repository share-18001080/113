name: Build FFmpeg Android ARM32 (Full Features + LibASS Added - ver7)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

jobs:
  build-ffmpeg-maximum:
    runs-on: ubuntu-latest
    timeout-minutes: 600 # 10 hours for comprehensive build

    env:
      ANDROID_API_LEVEL: 21
      ANDROID_ABI: armeabi-v7a
      NDK_VERSION: r25c
      FFMPEG_VERSION: n7.1
      MAKEFLAGS: -j$(nproc)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android NDK r25c
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c
          add-to-path: true
          local-cache: false

      - name: Install Base Dependencies
        run: |
          sudo apt-get update

      - name: Install Build Tools 
        run: |
          sudo apt-get install -y \
            build-essential yasm nasm pkg-config autoconf automake libtool

      - name: Install Development Tools
        run: |
          sudo apt-get install -y \
            git wget curl cmake ninja-build python3 python3-pip

      - name: Install Additional Tools
        run: |
          sudo apt-get install -y \
            gperf gettext texinfo flex bison ccache meson ragel

      - name: Install System Libraries
        run: |
          sudo apt-get install -y \
            zip unzip libssl-dev zlib1g-dev libbz2-dev liblzma-dev

      - name: Setup CCCache
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc

      - name: Cache External Libraries
        uses: actions/cache@v4
        id: cache-external
        with:
          path: |
            external
            build/external
          key: external-libs-full-libass-added-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-v1
          restore-keys: |
            external-libs-full-libass-added-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-

      - name: Setup Build Environment
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          mkdir -p external build/external
          cd external
          
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Create all directories
          mkdir -p $PREFIX/{lib,include,lib/pkgconfig,bin,man/man3,inc}

          # Create tool symlinks
          for tool in strings nm objdump strip readelf as ld; do
            ln -sf llvm-$tool $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-$tool
          done

          for tool in gcc ar ranlib; do
            ln -sf $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang $TOOLCHAIN_PATH/bin/arm-linux-androideabi-$tool
          done

      - name: Build Base Libraries
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build zlib
          echo "Building zlib..."
          wget -q https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz
          tar xzf zlib-1.3.tar.gz
          cd zlib-1.3
          ./configure --prefix=$PREFIX --static
          make -j$(nproc)
          make install
          cd ..

          # Build bzip2
          echo "Building bzip2..."
          wget -q https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          tar xzf bzip2-1.0.8.tar.gz
          cd bzip2-1.0.8
          make CC=$CC AR=$AR RANLIB=$RANLIB PREFIX=$PREFIX install
          cd ..

          # Build xz
          echo "Building xz..."
          wget -q https://github.com/tukaani-project/xz/releases/download/v5.4.5/xz-5.4.5.tar.gz
          tar xzf xz-5.4.5.tar.gz
          cd xz-5.4.5
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-doc --disable-scripts
          make -j$(nproc)
          make install
          cd ..

      - name: Build Video Codecs
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build x264
          echo "Building x264..."
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure --prefix=$PREFIX --host=$TARGET_HOST \
            --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
            --sysroot=$SYSROOT --enable-static --disable-cli \
            --enable-pic --disable-asm \
            --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS"
          make -j$(nproc)
          make install
          cd ..

          # Build x265
          echo "Building x265..."
          git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
          cd x265/build/linux
          sed -i '1i cmake_policy(SET CMP0074 OLD)' ../../source/CMakeLists.txt || true
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DENABLE_PIC=ON \
            -DENABLE_ASSEMBLY=OFF -DCMAKE_CXX_FLAGS="$CXXFLAGS -Wno-unused-parameter" \
            ../../source
          make -j$(nproc)
          make install

          # Create x265.pc manually using echo
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/x265.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Name: x265" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Description: H.265/HEVC video encoder" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Version: 3.5" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Libs: -L\${libdir} -lx265" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Libs.private: -lstdc++ -lm -ldl" >> $PREFIX/lib/pkgconfig/x265.pc
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/x265.pc
          cd ../../..

          # Build libvpx
          echo "Building libvpx..."
          git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          unset AS ASFLAGS
          export AS=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export ASFLAGS="-c"
          ./configure --target=armv7-android-gcc --prefix=$PREFIX \
            --disable-shared --enable-static --enable-pic \
            --disable-examples --disable-docs --disable-unit-tests \
            --disable-tools --disable-runtime-cpu-detect --disable-neon-asm
          make -j$(nproc)
          make install
          cd ..

      - name: Build LibAV1 (from ver6)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build LibAV1
          echo "🎯 Building LibAV1 (from ver6)..."
          git clone --depth 1 https://aomedia.googlesource.com/aom.git libaom
          cd libaom
          mkdir -p build_android
          cd build_android

          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a \
            -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF \
            -DENABLE_DOCS=OFF \
            -DENABLE_EXAMPLES=OFF \
            -DENABLE_TESTDATA=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_TOOLS=OFF \
            -DCONFIG_AV1_DECODER=1 \
            -DCONFIG_AV1_ENCODER=1 \
            -DCONFIG_MULTITHREAD=1 \
            -DCONFIG_PIC=1 \
            -DCONFIG_RUNTIME_CPU_DETECT=0 \
            -DCONFIG_WEBM_IO=0 \
            -DAOM_TARGET_CPU=arm \
            -DCMAKE_ASM_COMPILER=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang \
            -DCMAKE_C_FLAGS="$CFLAGS -DNDEBUG -Wno-unused-function -Wno-unused-parameter" \
            -DCMAKE_CXX_FLAGS="$CXXFLAGS -DNDEBUG -Wno-unused-function -Wno-unused-parameter" \
            ..

          if make -j$(nproc) V=1 2>&1 | tee build.log; then
            echo "✅ LibAV1 parallel build succeeded"
          else
            echo "⚠️ Parallel build failed, trying single-threaded..."
            make clean
            if make V=1 2>&1 | tee build-single.log; then
              echo "✅ LibAV1 single-threaded build succeeded"
            else
              echo "⚠️ Build failed, trying with reduced optimizations..."
              make clean
              cmake -DCMAKE_C_FLAGS="$CFLAGS -O1 -DNDEBUG" -DCMAKE_CXX_FLAGS="$CXXFLAGS -O1 -DNDEBUG" ..
              make V=1 || echo "❌ LibAV1 build failed completely"
            fi
          fi

          if make install 2>/dev/null; then
            echo "✅ LibAV1 installation successful"
          else
            echo "⚠️ Standard installation failed, trying manual installation..."
            mkdir -p $PREFIX/lib $PREFIX/include
            
            if [ -f "libaom.a" ]; then
              cp libaom.a $PREFIX/lib/ && echo "✅ LibAV1 library copied manually"
            elif find . -name "libaom.a" -exec cp {} $PREFIX/lib/ \; 2>/dev/null; then
              echo "✅ LibAV1 library found and copied"
            else
              echo "❌ LibAV1 library not found"
            fi
            
            if [ -d "../aom" ]; then
              cp -r ../aom $PREFIX/include/ 2>/dev/null || echo "Headers copy attempted"
            fi
          fi

          # Create pkg-config file
          if [ -f "$PREFIX/lib/libaom.a" ]; then
            echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/aom.pc
            echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Name: aom" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Description: AV1 Video Codec Library" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Version: 3.0.0" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Libs: -L\${libdir} -laom" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Libs.private: -lstdc++ -lm -ldl" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/aom.pc
            echo "✅ LibAV1 successfully built and configured!"
          else
            echo "❌ LibAV1 build failed completely"
          fi
          cd ../..

      - name: Build Audio Codecs - Part 1 (FDK-AAC from ver5)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build FDK-AAC with comprehensive fixes (from ver5)
          echo "🎯 Building FDK-AAC with comprehensive fixes (from ver5)..."
          git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git
          cd fdk-aac

          # Comprehensive C++ fixes
          echo "Applying comprehensive C++ syntax fixes..."
          
          find . -name "*.cpp" -exec sed -i 's/<<;=/<<= /g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/>>=/>>= /g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/>>;/>> ;/g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/<<;/<< ;/g' {} \; || true

          if [ -f "libAACdec/src/aacdec_hcr.cpp" ]; then
            sed -i 's/escape_word <<;=/escape_word <<= /g' libAACdec/src/aacdec_hcr.cpp || true
            sed -i 's/escape_word >>;/escape_word >> ;/g' libAACdec/src/aacdec_hcr.cpp || true
            sed -i 's/carryBit <<;=/carryBit <<= /g' libAACdec/src/aacdec_hcr.cpp || true
          fi

          find . -name "*.cpp" -exec sed -i 's/value <<;=/value <<= /g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/bits >>;=/bits >>= /g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/data <<;=/data <<= /g' {} \; || true
          find . -name "*.cpp" -exec sed -i 's/tmp >>;=/tmp >>= /g' {} \; || true

          find . -name "*.h" -exec sed -i 's/<<;=/<<= /g' {} \; || true
          find . -name "*.h" -exec sed -i 's/>>=/>>= /g' {} \; || true

          ./autogen.sh

          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --with-pic \
            --disable-example \
            CXX="$CXX -std=c++11 -Wno-shift-count-overflow -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -Wno-narrowing -fpermissive" \
            CXXFLAGS="$CXXFLAGS -Wno-shift-count-overflow -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -Wno-narrowing -fpermissive"

          if make -j$(nproc) V=1 2>&1 | tee build.log; then
            echo "✅ Parallel build succeeded"
          else
            echo "⚠️ Parallel build failed, trying single-threaded..."
            make clean
            if make V=1 2>&1 | tee build-single.log; then
              echo "✅ Single-threaded build succeeded"
            else
              echo "⚠️ Trying manual library compilation..."
              make clean
              cd libFDK && make V=1 || echo "libFDK issues"
              cd ../libAACdec && make V=1 || echo "libAACdec issues"
              cd ../libAACenc && make V=1 || echo "libAACenc issues"
              cd ../libPCMutils && make V=1 || echo "libPCMutils issues"
              cd ../libMpegTPDec && make V=1 || echo "libMpegTPDec issues"
              cd ../libMpegTPEnc && make V=1 || echo "libMpegTPEnc issues"
              cd ../libSBRdec && make V=1 || echo "libSBRdec issues"
              cd ../libSBRenc && make V=1 || echo "libSBRenc issues"
              cd ..
              
              $AR rcs .libs/libfdk-aac.a \
                libFDK/.libs/*.o \
                libAACdec/.libs/*.o \
                libAACenc/.libs/*.o \
                libPCMutils/.libs/*.o \
                libMpegTPDec/.libs/*.o \
                libMpegTPEnc/.libs/*.o \
                libSBRdec/.libs/*.o \
                libSBRenc/.libs/*.o 2>/dev/null || echo "Manual linking attempted"
            fi
          fi

          if make install 2>/dev/null; then
            echo "✅ FDK-AAC installation successful"
          else
            echo "⚠️ Manual installation..."
            mkdir -p $PREFIX/lib $PREFIX/include
            
            if [ -f ".libs/libfdk-aac.a" ]; then
              cp .libs/libfdk-aac.a $PREFIX/lib/ && echo "✅ Library copied manually"
            elif find . -name "libfdk-aac.a" -exec cp {} $PREFIX/lib/ \; 2>/dev/null; then
              echo "✅ Library found and copied"
            fi
            
            [ -f "libAACenc/include/aacenc_lib.h" ] && cp libAACenc/include/aacenc_lib.h $PREFIX/include/
            [ -f "libAACdec/include/aacdecoder_lib.h" ] && cp libAACdec/include/aacdecoder_lib.h $PREFIX/include/
            [ -f "libFDK/include/FDK_audio.h" ] && cp libFDK/include/FDK_audio.h $PREFIX/include/
          fi
          
          if [ -f "$PREFIX/lib/libfdk-aac.a" ]; then
            echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Name: fdk-aac" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Description: Fraunhofer FDK AAC Codec Library" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Version: 2.0.0" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Libs: -L\${libdir} -lfdk-aac" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Libs.private: -lm" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
            echo "✅ FDK-AAC successfully built!"
          fi
          cd ..

          # Build opus
          echo "Building opus..."
          git clone --depth 1 https://github.com/xiph/opus.git
          cd opus
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-doc \
            --disable-extra-programs --enable-fixed-point --disable-intrinsics
          make -j$(nproc)
          make install
          cd ..

      - name: Build Audio Codecs - Part 2 (LAME, TwoLAME from ver4)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build LAME
          echo "Building lame..."
          wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz || \
          wget -q https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz
          tar xzf lame-3.100.tar.gz
          cd lame-3.100

          wget -q -O config.sub 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' || {
            sed -i 's/| android/| android | androideabi/g' config.sub
            sed -i '/android/a\ androideabi)' config.sub
            sed -i '/androideabi)/a\ basic_machine=arm-unknown' config.sub
            sed -i '/basic_machine=arm-unknown/a\ os=-linux-androideabi' config.sub
            sed -i '/os=-linux-androideabi/a\ ;;' config.sub
          }
          chmod +x config.sub config.guess

          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-frontend \
            --disable-decoder --disable-dependency-tracking --with-pic \
            CFLAGS="$CFLAGS -DHAVE_CONFIG_H -fno-fast-math -Wno-unused-function"
          make -j$(nproc) || { make clean; make; }
          make install
          cd ..

          # Build TwoLAME (from ver4)
          echo "🎯 Building TwoLAME (from ver4)..."
          wget -q https://downloads.sourceforge.net/project/twolame/twolame/0.4.0/twolame-0.4.0.tar.gz || \
          wget -q https://github.com/njh/twolame/archive/refs/tags/0.4.0.tar.gz -O twolame-0.4.0.tar.gz
          
          tar xzf twolame-0.4.0.tar.gz
          cd twolame-0.4.0* || cd twolame-0.4.0
          
          if [ ! -f "configure" ]; then
            [ -f "autogen.sh" ] && ./autogen.sh || autoreconf -fiv
          fi

          wget -q -O config.sub 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' || {
            if [ -f "config.sub" ]; then
              sed -i 's/| android/| android | androideabi/g' config.sub
              sed -i '/android/a\ androideabi)' config.sub
              sed -i '/androideabi)/a\ basic_machine=arm-unknown' config.sub
              sed -i '/basic_machine=arm-unknown/a\ os=-linux-androideabi' config.sub
              sed -i '/os=-linux-androideabi/a\ ;;' config.sub
            fi
          }
          chmod +x config.sub config.guess 2>/dev/null || true

          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-frontend \
            --with-pic --disable-dependency-tracking \
            CFLAGS="$CFLAGS -DANDROID -fno-strict-aliasing -Wno-unused-function" || {
            autoreconf -fiv --force
            ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
              --disable-shared --enable-static --with-pic CFLAGS="$CFLAGS -DANDROID"
          }
          
          make -j$(nproc) V=1 || { make clean; make V=1; }
          make install || {
            if [ -f "libtwolame/.libs/libtwolame.a" ]; then
              cp libtwolame/.libs/libtwolame.a $PREFIX/lib/
              cp libtwolame/twolame.h $PREFIX/include/
            elif [ -f "src/.libs/libtwolame.a" ]; then
              cp src/.libs/libtwolame.a $PREFIX/lib/
              cp src/twolame.h $PREFIX/include/ 2>/dev/null || cp twolame.h $PREFIX/include/ 2>/dev/null
            fi
          }
          
          if [ -f "$PREFIX/lib/libtwolame.a" ]; then
            echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/twolame.pc
            echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Name: twolame" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Description: MPEG Audio Layer 2 encoder" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Version: 0.4.0" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Libs: -L\${libdir} -ltwolame" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Libs.private: -lm" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/twolame.pc
            echo "✅ TwoLAME successfully built!"
          fi
          cd ..

      - name: Build Xiph Libraries (Theora from ver3)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build libogg
          echo "Building libogg..."
          git clone --depth 1 https://github.com/xiph/ogg.git
          cd ogg
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static
          make -j$(nproc)
          make install
          cd ..

          # Build libvorbis
          echo "Building libvorbis..."
          git clone --depth 1 https://github.com/xiph/vorbis.git
          cd vorbis
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-docs --disable-examples
          make -j$(nproc)
          make install
          cd ..

          # Build libtheora (from ver3)
          echo "🎯 Building libtheora (from ver3)..."
          git clone --depth 1 https://github.com/xiph/theora.git
          cd theora
          
          [ ! -f "configure" ] && ./autogen.sh
          
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-doc --disable-spec \
            --disable-examples --disable-oggtest --disable-vorbistest \
            --disable-sdltest --disable-asm --with-pic \
            --with-ogg=$PREFIX --with-vorbis=$PREFIX \
            CFLAGS="$CFLAGS -DANDROID -fno-strict-aliasing"
          
          make -j$(nproc) V=1 || { make clean; make V=1; }
          make install
          cd ..

          # Build libspeex
          echo "Building libspeex..."
          git clone --depth 1 https://github.com/xiph/speex.git
          cd speex
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-oggtest
          make -j$(nproc)
          make install
          cd ..

      - name: Build Additional Libraries (GSM, FriBidi from ver1-2)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build GSM (from ver1)
          echo "🎯 Building GSM (from ver1)..."
          wget -q http://www.quut.com/gsm/gsm-1.0.22.tar.gz || \
          wget -q https://github.com/timothytylee/libgsm-mirror/archive/refs/tags/1.0.22.tar.gz -O gsm-1.0.22.tar.gz
          tar xzf gsm-1.0.22.tar.gz
          cd gsm-1.0.*
          
          sed -i "s|^CC.*|CC=$CC|" Makefile
          sed -i "s|^AR.*|AR=$AR|" Makefile
          sed -i "s|^RANLIB.*|RANLIB=$RANLIB|" Makefile
          sed -i 's/-O2/-Os/g' Makefile
          sed -i 's|^INSTALL_ROOT.*|INSTALL_ROOT='$PREFIX'|' Makefile
          
          make -j$(nproc) || make
          mkdir -p $PREFIX/{lib,include/gsm,man/man3}
          cp lib/libgsm.a $PREFIX/lib/
          cp inc/gsm.h $PREFIX/include/gsm/
          cp inc/gsm.h $PREFIX/include/
          
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/gsm.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "Name: gsm" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "Description: GSM 06.10 lossy speech compression" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "Version: 1.0.22" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "Libs: -L\${libdir} -lgsm" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/gsm.pc
          echo "✅ GSM successfully built!"
          cd ..

          # Build FriBidi (from ver2)
          echo "🎯 Building FriBidi (from ver2)..."
          git clone --depth 1 https://github.com/fribidi/fribidi.git
          cd fribidi
          
          if [ ! -f "configure" ]; then
            meson setup build \
              --cross-file=- <<MESON_CROSS
          [binaries]
          c = '$CC'
          cpp = '$CXX'
          ar = '$AR'
          strip = '$STRIP'
          
          [host_machine]
          system = 'android'
          cpu_family = 'arm'
          cpu = 'armv7a'
          endian = 'little'
          MESON_CROSS
              --prefix=$PREFIX \
              --default-library=static \
              --buildtype=release \
              -Ddocs=false \
              -Dtests=false || {
              echo "Meson setup failed, trying autotools..."
              ./autogen.sh
              ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
                --disable-shared --enable-static --with-pic \
                CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
            }
            
            if [ -d "build" ]; then
              cd build
              ninja && ninja install
              cd ..
            else
              make -j$(nproc) && make install
            fi
          fi
          cd ..

      - name: Build Image & Font Libraries
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build libpng
          echo "Building libpng..."
          git clone --depth 1 https://github.com/glennrp/libpng.git
          cd libpng
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --with-pic
          make -j$(nproc)
          make install
          cd ..

          # Build libwebp
          echo "Building libwebp..."
          git clone --depth 1 https://chromium.googlesource.com/webm/libwebp.git
          cd libwebp
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-gl --with-pic
          make -j$(nproc)
          make install
          cd ..

          # Build FreeType
          echo "Building freetype..."
          git clone --depth 1 https://github.com/freetype/freetype.git
          cd freetype
          ./autogen.sh
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --with-pic \
            --without-harfbuzz --with-png=yes
          make -j$(nproc)
          make install
          cd ..

          # Build OpenJPEG
          echo "Building openjpeg..."
          git clone --depth 1 https://github.com/uclouvain/openjpeg.git
          cd openjpeg
          mkdir build && cd build
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF -DBUILD_CODEC=OFF \
            ..
          make -j$(nproc)
          make install
          cd ../..

      - name: Build LibASS (NEW FEATURE - ver7)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # Build LibASS (NEW IN VER7)
          echo "🎯 Building LibASS (NEW FEATURE - ver7)..."
          git clone --depth 1 https://github.com/libass/libass.git
          cd libass

          # Generate configure script
          if [ ! -f "configure" ]; then
            ./autogen.sh
          fi

          # Configure LibASS with Android compatibility
          echo "Configuring LibASS for Android ARM..."
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --with-pic \
            --disable-require-system-font-provider \
            --enable-fontconfig=no \
            --enable-harfbuzz=no \
            --enable-asm=no \
            CFLAGS="$CFLAGS -DANDROID -Wno-unused-function -Wno-unused-parameter" \
            LDFLAGS="$LDFLAGS"

          # Enhanced build with error handling
          echo "Building LibASS with enhanced error handling..."
          if make -j$(nproc) V=1 2>&1 | tee build.log; then
            echo "✅ LibASS parallel build succeeded"
          else
            echo "⚠️ Parallel build failed, trying single-threaded..."
            make clean
            if make V=1 2>&1 | tee build-single.log; then
              echo "✅ LibASS single-threaded build succeeded"
            else
              echo "❌ LibASS build failed, checking for partial build..."
              # Try to salvage partial build
              if [ -f "libass/.libs/libass.a" ]; then
                echo "⚠️ Found partial library, attempting manual installation..."
                mkdir -p $PREFIX/lib $PREFIX/include/ass
                cp libass/.libs/libass.a $PREFIX/lib/ 2>/dev/null || true
                cp libass/ass.h $PREFIX/include/ass/ 2>/dev/null || true
                cp libass/ass_types.h $PREFIX/include/ass/ 2>/dev/null || true
              fi
            fi
          fi

          # Install with fallback
          if make install 2>/dev/null; then
            echo "✅ LibASS installation successful"
          else
            echo "⚠️ Standard installation failed, trying manual installation..."
            mkdir -p $PREFIX/lib $PREFIX/include/ass
            
            # Find and copy library
            if [ -f "libass/.libs/libass.a" ]; then
              cp libass/.libs/libass.a $PREFIX/lib/ && echo "✅ LibASS library copied manually"
            elif find . -name "libass.a" -exec cp {} $PREFIX/lib/ \; 2>/dev/null; then
              echo "✅ LibASS library found and copied"
            else
              echo "❌ LibASS library not found"
            fi
            
            # Copy headers
            if [ -d "libass" ]; then
              cp libass/ass.h $PREFIX/include/ass/ 2>/dev/null || true
              cp libass/ass_types.h $PREFIX/include/ass/ 2>/dev/null || true
            fi
          fi

          # Create pkg-config file
          if [ -f "$PREFIX/lib/libass.a" ]; then
            echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/libass.pc
            echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Name: libass" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Description: SSA/ASS subtitles rendering library" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Version: 0.17.0" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Requires: freetype2 fribidi" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Libs: -L\${libdir} -lass" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Libs.private: -lfreetype -lfribidi -lm" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/libass.pc
            echo "✅ LibASS successfully built and configured!"
          else
            echo "❌ LibASS build failed completely"
          fi
          cd ..

      - name: Verify All Libraries (Including LibASS)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export PREFIX=$(pwd)/../build/external

          echo "=== COMPLETE LIBRARY VERIFICATION (VER7 + LibASS) ==="
          ls -la $PREFIX/lib/

          echo "=== PKG-CONFIG FILES ==="
          ls -la $PREFIX/lib/pkgconfig/

          echo "=== ALL LIBRARIES STATUS ==="
          for lib in libx264.a libx265.a libvpx.a libaom.a libopus.a libmp3lame.a libtwolame.a \
                     libfdk-aac.a libvorbis.a libogg.a libtheora.a libtheoraenc.a libtheoradec.a \
                     libspeex.a libgsm.a libfribidi.a libwebp.a libfreetype.a libass.a \
                     libopenjp2.a libz.a libbz2.a liblzma.a; do
            if [ -f "$PREFIX/lib/$lib" ]; then
              echo "✅ $lib: $(du -sh $PREFIX/lib/$lib | cut -f1)"
            else
              echo "❌ $lib: Missing"
            fi
          done

          # Save build status for FFmpeg configure
          echo "HAVE_FRIBIDI=$([ -f \"$PREFIX/lib/libfribidi.a\" ] && echo true || echo false)" > $PREFIX/build_status.env
          echo "HAVE_GSM=$([ -f \"$PREFIX/lib/libgsm.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env  
          echo "HAVE_THEORA=$([ -f \"$PREFIX/lib/libtheora.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_TWOLAME=$([ -f \"$PREFIX/lib/libtwolame.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_FDK_AAC=$([ -f \"$PREFIX/lib/libfdk-aac.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_LIBAOM=$([ -f \"$PREFIX/lib/libaom.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_LIBASS=$([ -f \"$PREFIX/lib/libass.a\" ] && echo true || echo false)" >> $PREFIX/build_status.env

      - name: Clone FFmpeg
        run: |
          git clone --depth 1 --branch ${{ env.FFMPEG_VERSION }} https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          echo "Applying Android compatibility patches..."
          sed -i 's/__builtin_assume_aligned//g' libavutil/mem.c || true
          sed -i 's/HAVE_BUILTIN_ASSUME_ALIGNED 1/HAVE_BUILTIN_ASSUME_ALIGNED 0/g' libavutil/mem.c || true
          find . -name "*.c" -exec sed -i 's/__restrict restrict//g' {} \; || true
          find . -name "*.h" -exec sed -i 's/__restrict restrict//g' {} \; || true

      - name: Create Build Directories  
        run: |
          mkdir -p build/armeabi-v7a output/armeabi-v7a logs

      - name: Configure FFmpeg (ALL Features + LibASS - ver7)
        working-directory: ffmpeg
        run: |
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export STRIP=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-strip
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"

          # Load build status
          if [ -f "$PREFIX/build_status.env" ]; then
            source $PREFIX/build_status.env
          else
            HAVE_FRIBIDI=false
            HAVE_GSM=false
            HAVE_THEORA=false
            HAVE_TWOLAME=false
            HAVE_FDK_AAC=false
            HAVE_LIBAOM=false
            HAVE_LIBASS=false
          fi

          echo "=== VERIFYING ALL LIBRARIES (VER7 + LibASS) ===" 
          ls -la $PREFIX/lib/
          pkg-config --list-all | grep -E "(x264|x265|opus|vpx|ogg|vorbis|gsm|fribidi|theora|twolame|fdk-aac|aom|ass)" || true

          # Complete base configuration with ALL libraries
          EXTRA_LIBS="-lmp3lame -lx264 -lx265 -lvpx -lopus -lvorbis -logg -lwebp -lspeex -lopenjp2 -lfreetype -lz -lbz2 -llzma -lstdc++ -lm -ldl -llog"
          ENABLE_LIBS="--enable-libx264 --enable-libx265 --enable-libvpx --enable-libopus --enable-libmp3lame --enable-libvorbis --enable-libwebp --enable-libspeex --enable-libopenjpeg --enable-libfreetype"

          # Add GSM support (from ver1)
          if [ "$HAVE_GSM" = true ] && [ -f "$PREFIX/lib/libgsm.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lgsm"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libgsm"
            echo "✅ GSM codec included"
          else
            echo "❌ GSM codec not available"
          fi

          # Add FriBidi support (from ver2)
          if [ "$HAVE_FRIBIDI" = true ] && [ -f "$PREFIX/lib/libfribidi.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lfribidi"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libfribidi"
            echo "✅ FriBidi included"
          else
            echo "❌ FriBidi not available"
          fi

          # Add Theora support (from ver3)
          if [ "$HAVE_THEORA" = true ] && [ -f "$PREFIX/lib/libtheora.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -ltheora -ltheoraenc -ltheoradec"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libtheora"
            echo "✅ Theora included"
          else
            echo "❌ Theora not available"
          fi

          # Add TwoLAME support (from ver4)
          if [ "$HAVE_TWOLAME" = true ] && [ -f "$PREFIX/lib/libtwolame.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -ltwolame"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libtwolame"
            echo "✅ TwoLAME included"
          else
            echo "❌ TwoLAME not available"
          fi

          # Add FDK-AAC support (from ver5)
          if [ "$HAVE_FDK_AAC" = true ] && [ -f "$PREFIX/lib/libfdk-aac.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lfdk-aac"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libfdk-aac --enable-nonfree"
            echo "✅ FDK-AAC included (from ver5)"
          else
            echo "❌ FDK-AAC not available"
          fi

          # Add LibAV1 support (from ver6)
          if [ "$HAVE_LIBAOM" = true ] && [ -f "$PREFIX/lib/libaom.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -laom"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libaom"
            echo "✅ LibAV1 included (from ver6)"
          else
            echo "❌ LibAV1 not available"
          fi

          # Add LibASS support (NEW IN VER7)
          if [ "$HAVE_LIBASS" = true ] && [ -f "$PREFIX/lib/libass.a" ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lass"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libass"
            echo "✅ LibASS included (NEW IN VER7)"
          else
            echo "❌ LibASS not available"
          fi

          echo "=== COMPLETE CONFIGURATION (VER7 + LibASS) ==="
          echo "ENABLE_LIBS: $ENABLE_LIBS"
          echo "EXTRA_LIBS: $EXTRA_LIBS"

          # FFmpeg configure
          ./configure \
            --prefix=$PREFIX \
            --enable-cross-compile \
            --target-os=android \
            --arch=arm \
            --cpu=armv7-a \
            --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
            --sysroot=$SYSROOT \
            --cc=$CC \
            --cxx=$CXX \
            --ar=$AR \
            --ranlib=$RANLIB \
            --strip=$STRIP \
            --nm=$TOOLCHAIN_PATH/bin/llvm-nm \
            --pkg-config=pkg-config \
            --pkg-config-flags="--static" \
            --enable-static \
            --disable-shared \
            --enable-pic \
            --enable-small \
            --disable-debug \
            --disable-doc \
            --disable-htmlpages \
            --disable-manpages \
            --disable-podpages \
            --disable-txtpages \
            --enable-gpl \
            --enable-version3 \
            $ENABLE_LIBS \
            --extra-cflags="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -I$PREFIX/include" \
            --extra-cxxflags="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -I$PREFIX/include" \
            --extra-ldflags="-L$PREFIX/lib -Wl,--gc-sections -Wl,-z,noexecstack" \
            --extra-libs="$EXTRA_LIBS" 2>&1 | tee ../logs/configure.log

          echo "✅ FFmpeg configuration completed for ver7!"

      - name: Build FFmpeg
        working-directory: ffmpeg
        run: |
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          echo "🔨 Building FFmpeg with ALL features + LibASS (ver7)..."
          make -j$(nproc) V=1 2>&1 | tee ../logs/build.log

      - name: Install FFmpeg
        working-directory: ffmpeg
        run: |
          export PREFIX=$(pwd)/../build/external
          make install 2>&1 | tee ../logs/install.log
          
          echo "📦 Collecting binaries..."
          mkdir -p ../output/armeabi-v7a
          cp ffmpeg ../output/armeabi-v7a/
          cp ffprobe ../output/armeabi-v7a/
          
          ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-strip \
            ../output/armeabi-v7a/ffmpeg \
            ../output/armeabi-v7a/ffprobe

      - name: Create Release Package
        run: |
          mkdir -p release
          cp -r output/armeabi-v7a/* release/
          cp -r build/external/lib release/libraries 2>/dev/null || true
          cp -r build/external/include release/headers 2>/dev/null || true
          
          cd release
          tar czf ffmpeg-android-armeabi-v7a-full-ver7-libass.tar.gz *
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-armeabi-v7a-full-ver7-libass
          path: release/
          retention-days: 30

      - name: Complete Build Summary
        run: |
          echo "## 🎯 FFmpeg Android COMPLETE Build (ver7 + LibASS)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "release/ffmpeg" ]; then
            echo "### ✅ BUILD SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Binary Size**: $(du -sh release/ffmpeg | cut -f1)" >> $GITHUB_STEP_SUMMARY
            echo "- **All previous features**: ✅ Included (ver1-6)" >> $GITHUB_STEP_SUMMARY
            echo "- **LibASS (NEW)**: 🎯 Successfully added" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Complete Feature Set (ver7)" >> $GITHUB_STEP_SUMMARY
          echo "- **Video**: H.264, H.265, VP8/9, Theora, AV1" >> $GITHUB_STEP_SUMMARY
          echo "- **Audio**: AAC (FDK), MP3, MP2, Opus, Vorbis, Speex, GSM" >> $GITHUB_STEP_SUMMARY
          echo "- **Subtitles**: ASS/SSA rendering (LibASS) ⭐ NEW" >> $GITHUB_STEP_SUMMARY
          echo "- **Text**: Bidirectional text support (FriBidi)" >> $GITHUB_STEP_SUMMARY
          echo "- **Images**: WebP, JPEG2000, Font rendering" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Libraries**: 17+ external codecs" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    needs: build-ffmpeg-maximum
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Complete Build Status  
        run: |
          if [ "${{ needs.build-ffmpeg-maximum.result }}" == "success" ]; then
            echo "🎉 SUCCESS: Complete FFmpeg build with ALL features + LibASS (ver7)!"
            echo "📱 Ready for Android deployment with full codec support"
            echo "🎯 LibASS subtitle rendering successfully added!"
          else
            echo "❌ FAILED: Complete build encountered errors"
            echo "📋 Check build logs for details"
          fi
