name: Auto Knowledge Base Generator

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  actions: read
  contents: write  # Cần quyền write để commit

jobs:
  update-knowledge-base:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Tải log workflow bị lỗi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_ID=${{ github.event.workflow_run.id }}
          
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/logs \
            -o current-log.zip
          
          unzip -q current-log.zip -d current-log/

      - name: Phân tích lỗi tự động
        id: analyze
        run: |
          echo "Đang phân tích log..."
          
          # Trích xuất các loại lỗi chính
          ERROR_TYPES=""
          
          # Kiểm tra lỗi dependencies
          if grep -q "not found\|No such file" current-log/; then
            ERROR_TYPES="${ERROR_TYPES}DEPENDENCY "
            echo "error_category=Dependencies" >> $GITHUB_OUTPUT
          fi
          
          # Kiểm tra lỗi linker
          if grep -q "undefined reference" current-log/; then
            ERROR_TYPES="${ERROR_TYPES}LINKER "
            echo "error_category=Linker" >> $GITHUB_OUTPUT
          fi
          
          # Kiểm tra lỗi configure
          if grep -q "configure: error" current-log/; then
            ERROR_TYPES="${ERROR_TYPES}CONFIGURE "
            echo "error_category=Configure" >> $GITHUB_OUTPUT
          fi
          
          # Kiểm tra lỗi workflow syntax
          if grep -q "syntax error\|unexpected EOF" current-log/; then
            ERROR_TYPES="${ERROR_TYPES}SYNTAX "
            echo "error_category=Workflow-Syntax" >> $GITHUB_OUTPUT
          fi
          
          # Mặc định nếu không match
          if [ -z "$ERROR_TYPES" ]; then
            echo "error_category=Unknown" >> $GITHUB_OUTPUT
          fi
          
          # Trích xuất dòng lỗi chính (50 dòng đầu tiên chứa error)
          grep -rh "error:\|ERROR:\|failed\|undefined reference" current-log/ | head -n 50 > main-errors.txt || echo "No specific errors found" > main-errors.txt
          
          # Trích xuất context (100 dòng cuối của log)
          find current-log/ -name "*.txt" -exec tail -n 100 {} \; | tail -n 100 > error-context.txt || echo "No context" > error-context.txt
          
          # Đếm số lần lỗi này xuất hiện trong quá khứ
          if [ -f .github/ERROR_KNOWLEDGE_BASE.md ]; then
            FIRST_ERROR_LINE=$(head -n 1 main-errors.txt)
            FREQUENCY=$(grep -c "$FIRST_ERROR_LINE" .github/ERROR_KNOWLEDGE_BASE.md || echo "0")
            echo "frequency=$FREQUENCY" >> $GITHUB_OUTPUT
          else
            echo "frequency=0" >> $GITHUB_OUTPUT
          fi

      - name: Khởi tạo Knowledge Base nếu chưa có
        run: |
          if [ ! -f .github/ERROR_KNOWLEDGE_BASE.md ]; then
            cat > .github/ERROR_KNOWLEDGE_BASE.md << 'EOFKB'
          # 📚 FFmpeg Android ARM32 - Error Knowledge Base
          
          > **Mục đích:** Tự động ghi lại toàn bộ lỗi build để tránh lặp lại sai lầm
          > 
          > **Cập nhật:** Tự động bởi GitHub Actions
          > 
          > **Tổng số lỗi:** 0
          
          ---
          
          ## 📋 Quick Reference
          
          | ID | Tên lỗi | Tần suất | Workflow | Ngày |
          |----|---------|----------|----------|------|
          
          ---
          
          ## 🔴 Chi tiết lỗi
          
          EOFKB
          
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .github/ERROR_KNOWLEDGE_BASE.md
            git commit -m "docs: Khởi tạo Error Knowledge Base"
          fi

      - name: Tạo ERROR ID mới
        id: error_id
        run: |
          # Đếm số lỗi hiện có
          if [ -f .github/ERROR_KNOWLEDGE_BASE.md ]; then
            ERROR_COUNT=$(grep -c "^### 🔴 ERROR-" .github/ERROR_KNOWLEDGE_BASE.md || echo "0")
          else
            ERROR_COUNT=0
          fi
          
          NEXT_NUM=$((ERROR_COUNT + 1))
          
          # Phân loại theo category
          CATEGORY="${{ steps.analyze.outputs.error_category }}"
          
          case $CATEGORY in
            Dependencies)
              ERROR_ID=$(printf "ERROR-0%02d" $NEXT_NUM)
              ;;
            Linker)
              ERROR_ID=$(printf "ERROR-1%02d" $NEXT_NUM)
              ;;
            Configure)
              ERROR_ID=$(printf "ERROR-2%02d" $NEXT_NUM)
              ;;
            Workflow-Syntax)
              ERROR_ID=$(printf "ERROR-3%02d" $NEXT_NUM)
              ;;
            *)
              ERROR_ID=$(printf "ERROR-9%02d" $NEXT_NUM)
              ;;
          esac
          
          echo "error_id=$ERROR_ID" >> $GITHUB_OUTPUT
          echo "Generated ERROR ID: $ERROR_ID"

      - name: Tạo tên lỗi tự động
        id: error_name
        run: |
          # Lấy từ khóa chính từ lỗi
          FIRST_ERROR=$(head -n 1 main-errors.txt)
          
          # Extract tên lỗi thông minh
          if echo "$FIRST_ERROR" | grep -q "undefined reference to"; then
            SYMBOL=$(echo "$FIRST_ERROR" | grep -oP "undefined reference to '\K[^']+")
            ERROR_NAME="Undefined reference to ${SYMBOL}"
          elif echo "$FIRST_ERROR" | grep -q "not found"; then
            PACKAGE=$(echo "$FIRST_ERROR" | grep -oP "Package '\K[^']+")
            if [ -n "$PACKAGE" ]; then
              ERROR_NAME="Package $PACKAGE not found"
            else
              ERROR_NAME="File or package not found"
            fi
          elif echo "$FIRST_ERROR" | grep -q "configure: error"; then
            ERROR_NAME="Configure failed"
          elif echo "$FIRST_ERROR" | grep -q "syntax error"; then
            ERROR_NAME="Workflow syntax error"
          else
            ERROR_NAME="Build failed - See details"
          fi
          
          echo "error_name=$ERROR_NAME" >> $GITHUB_OUTPUT
          echo "Error name: $ERROR_NAME"

      - name: Thêm entry vào Knowledge Base
        env:
          ERROR_ID: ${{ steps.error_id.outputs.error_id }}
          ERROR_NAME: ${{ steps.error_name.outputs.error_name }}
          WORKFLOW_NAME: ${{ github.event.workflow_run.name }}
          RUN_NUMBER: ${{ github.event.workflow_run.run_number }}
          RUN_ID: ${{ github.event.workflow_run.id }}
          FREQUENCY: ${{ steps.analyze.outputs.frequency }}
        run: |
          # Cập nhật Quick Reference table
          FREQ_DISPLAY="$((FREQUENCY + 1))"
          sed -i "/^| ID | Tên lỗi/a | $ERROR_ID | $ERROR_NAME | ${FREQ_DISPLAY}x | $WORKFLOW_NAME | $(date +%Y-%m-%d) |" .github/ERROR_KNOWLEDGE_BASE.md
          
          # Cập nhật tổng số lỗi
          TOTAL_ERRORS=$(grep -c "^### 🔴 ERROR-" .github/ERROR_KNOWLEDGE_BASE.md || echo "0")
          NEW_TOTAL=$((TOTAL_ERRORS + 1))
          sed -i "s/\*\*Tổng số lỗi:\*\* [0-9]*/\*\*Tổng số lỗi:\*\* $NEW_TOTAL/" .github/ERROR_KNOWLEDGE_BASE.md
          
          # Thêm chi tiết lỗi
          cat >> .github/ERROR_KNOWLEDGE_BASE.md << EOFENTRY
          
          ### 🔴 $ERROR_ID: $ERROR_NAME
          
          **📅 Ngày phát hiện:** $(date +%Y-%m-%d)
          
          **📦 Workflow:** $WORKFLOW_NAME
          
          **🔢 Run:** [#$RUN_NUMBER](https://github.com/${{ github.repository }}/actions/runs/$RUN_ID)
          
          **🎯 Tần suất:** Lần thứ $FREQ_DISPLAY gặp lỗi này
          
          **⚠️ Triệu chứng:**
          \`\`\`bash
          $(head -n 20 main-errors.txt)
          \`\`\`
          
          **📋 Context (100 dòng cuối log):**
          \`\`\`
          $(head -n 50 error-context.txt)
          \`\`\`
          
          **🔍 Nguyên nhân gốc rễ:**
          - [ ] TODO: Cần phân tích thủ công
          - Loại lỗi: ${{ steps.analyze.outputs.error_category }}
          
          **🛠️ Fix đã thử:**
          - [ ] TODO: Cập nhật sau khi thử fix
          
          **📝 Status:** 🔴 Chưa fix
          
          **🏷️ Tags:** \`${{ steps.analyze.outputs.error_category }}\` \`auto-generated\` \`run-$RUN_NUMBER\`
          
          ---
          
          EOFENTRY

      - name: Tạo GitHub Issue tự động (Optional)
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ERROR_ID: ${{ steps.error_id.outputs.error_id }}
          ERROR_NAME: ${{ steps.error_name.outputs.error_name }}
        run: |
          gh issue create \
            --title "[$ERROR_ID] $ERROR_NAME" \
            --body "Lỗi được phát hiện tự động từ workflow **${{ github.event.workflow_run.name }}** run #${{ github.event.workflow_run.run_number }}.

          **Chi tiết:** Xem file \`.github/ERROR_KNOWLEDGE_BASE.md\` section \`$ERROR_ID\`
          
          **Log đầy đủ:** https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}
          
          **Action items:**
          - [ ] Phân tích nguyên nhân gốc rễ
          - [ ] Thử fix và cập nhật Knowledge Base
          - [ ] Verify fix không gây lỗi khác
          
          **Auto-generated by:** \`auto-knowledge-base.yml\`" \
            --label "bug,auto-generated,needs-analysis" \
            --assignee "${{ github.repository_owner }}"

      - name: Commit và push Knowledge Base
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .github/ERROR_KNOWLEDGE_BASE.md
          
          if git diff --staged --quiet; then
            echo "Không có thay đổi, skip commit"
          else
            git commit -m "docs: Thêm ${{ steps.error_id.outputs.error_id }} - ${{ steps.error_name.outputs.error_name }}

          Workflow: ${{ github.event.workflow_run.name }}
          Run: #${{ github.event.workflow_run.run_number }}
          
          Auto-generated by GitHub Actions"
            
            git push
          fi

      - name: Hiển thị tóm tắt
        run: |
          echo "## ✅ Knowledge Base Đã Cập Nhật" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**ERROR ID:** ${{ steps.error_id.outputs.error_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tên lỗi:** ${{ steps.error_name.outputs.error_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** #${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 File đã cập nhật:" >> $GITHUB_STEP_SUMMARY
          echo "- \`.github/ERROR_KNOWLEDGE_BASE.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Liên kết:" >> $GITHUB_STEP_SUMMARY
          echo "- [Xem Knowledge Base](https://github.com/${{ github.repository }}/blob/main/.github/ERROR_KNOWLEDGE_BASE.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Log đầy đủ](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 Action tiếp theo:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review file Knowledge Base" >> $GITHUB_STEP_SUMMARY
          echo "2. Phân tích nguyên nhân lỗi" >> $GITHUB_STEP_SUMMARY
          echo "3. Cập nhật phần TODO trong entry" >> $GITHUB_STEP_SUMMARY
          echo "4. Thử fix và commit kết quả" >> $GITHUB_STEP_SUMMARY

      - name: Dọn dẹp
        run: rm -rf current-log/ current-log.zip main-errors.txt error-context.txt
