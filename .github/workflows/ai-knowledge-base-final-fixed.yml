name: AI Knowledge Base (Final - Syntax Fixed)

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  actions: read
  contents: write

jobs:
  ai-analyze-error:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      contains(github.event.workflow_run.name, 'ver') &&
      !contains(github.event.workflow_run.name, 'AI Knowledge Base')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Debug workflow info
        run: |
          echo "## 🔍 Workflow Info" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.event.workflow_run.id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run #:** ${{ github.event.workflow_run.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Conclusion:** ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}" >> $GITHUB_STEP_SUMMARY

      - name: Download and extract error context
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FAILED_RUN_ID=${{ github.event.workflow_run.id }}
          
          echo "📥 Downloading log for run $FAILED_RUN_ID"
          
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${FAILED_RUN_ID}/logs" \
            -o current-log.zip
          
          if [ ! -f current-log.zip ]; then
            echo "❌ Failed to download log"
            exit 1
          fi
          
          SIZE=$(stat -c%s current-log.zip 2>/dev/null || stat -f%z current-log.zip)
          echo "✅ Downloaded: ${SIZE} bytes"
          
          unzip -q current-log.zip -d current-log/
          find current-log/ -name "*.txt" -exec cat {} \; > full-log.txt
          
          TOTAL_LINES=$(wc -l < full-log.txt)
          echo "📊 Total lines: $TOTAL_LINES"
          
          echo "🔍 Searching for exit code markers..."
          EXIT_CODE_LINES=$(grep -n "exit code [1-9]" full-log.txt | cut -d: -f1)
          
          if [ -z "$EXIT_CODE_LINES" ]; then
            echo "⚠️ No exit code found, trying error marker"
            EXIT_CODE_LINES=$(grep -n "##\[error\]" full-log.txt | head -n 1 | cut -d: -f1)
          fi
          
          if [ -n "$EXIT_CODE_LINES" ]; then
            FIRST_EXIT=$(echo "$EXIT_CODE_LINES" | head -n 1)
            echo "✅ Found exit code at line: $FIRST_EXIT"
            
            START_LINE=$((FIRST_EXIT - 3000))
            END_LINE=$((FIRST_EXIT + 100))
            
            if [ $START_LINE -lt 1 ]; then
              START_LINE=1
            fi
            
            if [ $END_LINE -gt $TOTAL_LINES ]; then
              END_LINE=$TOTAL_LINES
            fi
            
            echo "📍 Extracting lines $START_LINE to $END_LINE"
            sed -n "${START_LINE},${END_LINE}p" full-log.txt > log-for-ai.txt
            
            EXTRACTED=$(wc -l < log-for-ai.txt)
            echo "📤 Extracted $EXTRACTED lines for AI"
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚨 Exit Codes Found:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            grep "exit code" full-log.txt | head -n 10 >> $GITHUB_STEP_SUMMARY
            
          else
            echo "⚠️ No exit code found, fallback"
            tail -n 5000 full-log.txt > log-for-ai.txt
          fi
          
          echo "🔍 Verifying extracted log..."
          
          if grep -q "meson.build.*ERROR\|configure: error\|undefined reference\|ERROR:" log-for-ai.txt; then
            echo "✅ Log contains build errors"
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Error Preview:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            grep -B50 -A10 "ERROR:\|error:" log-for-ai.txt | head -n 120 >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No clear error pattern"
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ No Clear Error Pattern" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            tail -n 50 log-for-ai.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test Gemini API Key
        id: test_api
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "❌ GEMINI_API_KEY not set"
            exit 1
          fi
          
          TEST=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"contents":[{"parts":[{"text":"Test"}]}]}')
          
          if echo "$TEST" | grep -q '"error"'; then
            echo "❌ API Key invalid"
            exit 1
          fi
          
          echo "✅ API Key valid"

      - name: Extract version from workflow name
        id: extract_ver
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          VERSION=$(echo "$WORKFLOW_NAME" | grep -oE 'ver[0-9]+' || echo "ver-unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Call Gemini API for analysis
        id: ai_analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          LOG_TEXT=$(head -c 20000 log-for-ai.txt | tr -d '\000-\037' | sed 's/"/\\"/g')
          
          cat > prompt.txt << 'EOFPROMPT'
          Bạn là chuyên gia phân tích lỗi FFmpeg Android ARM32.
          
          WORKFLOW: Build FFmpeg Android ARM32 (Full Features + LibASS Added - ver8)
          VERSION: ver8
          
          CONTEXT QUAN TRỌNG:
          - ver8 đang build LibASS (subtitle renderer library)
          - Các thư viện đã build THÀNH CÔNG ở ver7: x264, x265, vpx, opus, lame, twolame, ogg, vorbis, theora, speex, gsm, fribidi, fdk-aac, aom, soxr, webp, freetype, openjpeg
          - Log này được trích xuất xung quanh dòng exit code (lỗi thật sự)
          - Chú ý: Tìm dòng Building LibASS hoặc Build LibASS để xác định thư viện đang build
          
          NHIỆM VỤ: Phân tích log và trả về JSON OBJECT (KHÔNG ARRAY):
          {
            "error_id": "ERROR-XXX",
            "error_name": "Mô tả chính xác và ngắn gọn",
            "root_cause": "Nguyên nhân gốc rễ chi tiết",
            "affected_library": "libass",
            "error_type": "DEPENDENCY|LINKER|CONFIGURE|SYNTAX|UNKNOWN",
            "symptoms": ["dòng lỗi chính xác từ log"],
            "fix_suggestion": "Cách fix cụ thể",
            "confidence": 90
          }
          
          LƯU Ý QUAN TRỌNG:
          - Trả về OBJECT {} duy nhất, KHÔNG PHẢI ARRAY [{}]
          - Tập trung vào lỗi CHÍNH gây exit code
          - affected_library phải là thư viện ĐANG BUILD
          - KHÔNG thêm markdown formatting
          - Chỉ trả về JSON thuần túy
          
          LOG (context xung quanh exit code):
          EOFPROMPT
          
          echo "$LOG_TEXT" >> prompt.txt
          
          ESCAPED=$(jq -Rs . < prompt.txt)
          
          echo "📤 Calling Gemini API..."
          
          RESP=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": $ESCAPED
                }]
              }],
              \"generationConfig\": {
                \"temperature\": 0.1,
                \"maxOutputTokens\": 1024,
                \"responseMimeType\": \"application/json\"
              }
            }")
          
          HTTP_CODE=$(echo "$RESP" | tail -n 1 | cut -d: -f2)
          BODY=$(echo "$RESP" | sed '$d')
          
          echo "HTTP Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ API error"
            echo "$BODY" | jq . 2>/dev/null || echo "$BODY"
            
            cat > ai-analysis.json << 'EOFERR'
          {
            "error_id": "ERROR-999",
            "error_name": "Gemini API unavailable",
            "root_cause": "API returned HTTP error",
            "affected_library": "unknown",
            "error_type": "API_ERROR",
            "symptoms": ["API HTTP error"],
            "fix_suggestion": "Retry later",
            "confidence": 20
          }
          EOFERR
          else
            echo "✅ API success"
            
            AI_TEXT=$(echo "$BODY" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)
            
            if [ -z "$AI_TEXT" ] || [ "$AI_TEXT" = "null" ]; then
              echo "❌ Empty response"
              cat > ai-analysis.json << 'EOFERR'
          {
            "error_id": "ERROR-998",
            "error_name": "Empty AI response",
            "root_cause": "Gemini returned empty",
            "affected_library": "unknown",
            "error_type": "API_ERROR",
            "symptoms": ["Empty"],
            "fix_suggestion": "Retry",
            "confidence": 15
          }
          EOFERR
            else
              echo "✅ Got AI response"
              echo "$AI_TEXT" > ai-analysis-raw.json
              
              if echo "$AI_TEXT" | jq -e 'type == "array"' > /dev/null 2>&1; then
                echo "⚠️ Converting array to object"
                echo "$AI_TEXT" | jq '.[0]' > ai-analysis.json
              else
                echo "✅ Got object"
                echo "$AI_TEXT" > ai-analysis.json
              fi
              
              if ! jq empty ai-analysis.json 2>/dev/null; then
                echo "⚠️ Invalid JSON"
                cat > ai-analysis.json << 'EOFERR'
          {
            "error_id": "ERROR-997",
            "error_name": "Invalid JSON",
            "root_cause": "Parse error",
            "affected_library": "unknown",
            "error_type": "API_ERROR",
            "symptoms": ["Invalid"],
            "fix_suggestion": "Review",
            "confidence": 10
          }
          EOFERR
              fi
            fi
          fi
          
          echo "Final JSON:"
          cat ai-analysis.json
          
          echo "error_id=$(jq -r '.error_id // "ERROR-000"' ai-analysis.json)" >> $GITHUB_OUTPUT
          echo "error_name=$(jq -r '.error_name // "Unknown"' ai-analysis.json)" >> $GITHUB_OUTPUT
          echo "affected_lib=$(jq -r '.affected_library // "unknown"' ai-analysis.json)" >> $GITHUB_OUTPUT

      - name: Initialize Knowledge Base
        run: |
          if [ ! -f .github/ERROR_KNOWLEDGE_BASE.md ]; then
            cat > .github/ERROR_KNOWLEDGE_BASE.md << 'EOFKB'
          # 📚 FFmpeg Android ARM32 - Error Knowledge Base

          > **Mục đích:** Tự động ghi lại tất cả lỗi build  
          > **Cập nhật:** Tự động bởi AI (Gemini 2.0 Flash)  
          > **Tổng số lỗi:** 0

          ---

          ## 📋 Quick Reference

          | ID | Lỗi | Thư viện | Version | Ngày |
          |----|-----|----------|---------|------|

          ---

          ## 🔴 Chi tiết lỗi

          EOFKB
            
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .github/ERROR_KNOWLEDGE_BASE.md
            git commit -m "docs: Init KB"
          fi

      - name: Add entry to Knowledge Base
        env:
          ERROR_ID: ${{ steps.ai_analysis.outputs.error_id }}
          ERROR_NAME: ${{ steps.ai_analysis.outputs.error_name }}
          AFFECTED_LIB: ${{ steps.ai_analysis.outputs.affected_lib }}
          VERSION: ${{ steps.extract_ver.outputs.version }}
        run: |
          JSON=$(cat ai-analysis.json)
          
          ROOT=$(echo "$JSON" | jq -r '.root_cause // "N/A"')
          TYPE=$(echo "$JSON" | jq -r '.error_type // "UNKNOWN"')
          FIX=$(echo "$JSON" | jq -r '.fix_suggestion // "N/A"')
          SYMP=$(echo "$JSON" | jq -r '.symptoms // ["N/A"] | join("\n- ")')
          CONF=$(echo "$JSON" | jq -r '.confidence // 0')
          
          sed -i "/^| ID | Lỗi/a | $ERROR_ID | $ERROR_NAME | $AFFECTED_LIB | $VERSION | $(date +%Y-%m-%d) |" .github/ERROR_KNOWLEDGE_BASE.md
          
          TOTAL=$(grep -c "^### 🔴 ERROR-" .github/ERROR_KNOWLEDGE_BASE.md 2>/dev/null || echo "0")
          TOTAL=$(echo "$TOTAL" | tr -d '\n\r ')
          NEW=$((TOTAL + 1))
          sed -i "s/Tổng số lỗi:\*\* [0-9]*/Tổng số lỗi:** $NEW/" .github/ERROR_KNOWLEDGE_BASE.md
          
          cat >> .github/ERROR_KNOWLEDGE_BASE.md << EOFENTRY

          ### 🔴 $ERROR_ID: $ERROR_NAME

          **📅** $(date +%Y-%m-%d) | **📦** ${{ github.event.workflow_run.name }} | **🔗** [Run #${{ github.event.workflow_run.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})

          **🎯 Thư viện:** \`$AFFECTED_LIB\` | **🏷️** \`$VERSION\` | **🤖** ${CONF}%

          **⚠️ Triệu chứng:**
          - $SYMP

          **🔍 Nguyên nhân:**  
          $ROOT

          **🛠️ Fix:**  
          $FIX

          **📝 Loại:** \`$TYPE\`

          ---

          EOFENTRY

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .github/ERROR_KNOWLEDGE_BASE.md
          
          if git diff --staged --quiet; then
            echo "No changes"
          else
            git commit -m "🤖 ${{ steps.ai_analysis.outputs.error_id }}: ${{ steps.ai_analysis.outputs.error_name }} [${{ steps.extract_ver.outputs.version }}]"
            git push
            echo "✅ Pushed"
          fi

      - name: Job Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.extract_ver.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Error ID:** ${{ steps.ai_analysis.outputs.error_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Affected:** ${{ steps.ai_analysis.outputs.affected_lib }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 AI Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat ai-analysis.json 2>/dev/null || echo "{}"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📄 KB:** [View](https://github.com/${{ github.repository }}/blob/main/.github/ERROR_KNOWLEDGE_BASE.md)" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -rf current-log/ current-log.zip full-log.txt log-for-ai.txt ai-analysis.json ai-analysis-raw.json prompt.txt 2>/dev/null || true
          echo "✅ Cleanup done"
