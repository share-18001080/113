name: AI Knowledge Base (Perplexity Optimized)

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  actions: read
  contents: write

jobs:
  ai-analyze-error:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      contains(github.event.workflow_run.name, 'ver') &&
      !contains(github.event.workflow_run.name, 'AI Knowledge Base')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download and analyze log
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/logs" \
            -o current-log.zip
          
          unzip -q current-log.zip -d current-log/
          find current-log/ -name "*.txt" -exec cat {} ; > full-log.txt
          
          TOTAL=$(wc -l < full-log.txt)
          echo "📊 Total: $TOTAL lines"
          
          # Find exit code
          EXIT_LINE=$(grep -n "exit code [1-9]" full-log.txt | head -n 1 | cut -d: -f1)
          [ -z "$EXIT_LINE" ] && EXIT_LINE=$(grep -n "##[error]" full-log.txt | head -n 1 | cut -d: -f1)
          
          if [ -n "$EXIT_LINE" ]; then
            START=$((EXIT_LINE - 20))
            [ $START -lt 1 ] && START=1
            sed -n "${START},${EXIT_LINE}p" full-log.txt > error-context-20.txt
            
            # Find detail log reference
            DETAIL_LOG_PATH=$(grep -o "A full log can be found at .*" error-context-20.txt | head -n 1 | sed 's/A full log can be found at //' | tr -d '
 ')
            
            if [ -n "$DETAIL_LOG_PATH" ]; then
              echo "✅ Detail log: $DETAIL_LOG_PATH"
              echo "$DETAIL_LOG_PATH" > detail-log-path.txt
              
              # Try extract detail log content
              DETAIL_LOG_NAME=$(basename "$DETAIL_LOG_PATH")
              if grep -q "$DETAIL_LOG_NAME" full-log.txt; then
                grep -A 100 "$DETAIL_LOG_NAME" full-log.txt | head -n 100 > detail-log-content.txt
              else
                touch detail-log-content.txt
              fi
            else
              touch detail-log-path.txt
              touch detail-log-content.txt
            fi
          else
            tail -n 20 full-log.txt > error-context-20.txt
            touch detail-log-path.txt
            touch detail-log-content.txt
          fi

      - name: Extract version
        id: extract_ver
        run: |
          VERSION=$(echo "${{ github.event.workflow_run.name }}" | grep -oE 'ver[0-9]+' || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Call Gemini (with retry)
        id: ai_analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          HAS_DETAIL=$([ -s detail-log-content.txt ] && echo "yes" || echo "no")
          
          # Build prompt
          cat > prompt.txt << 'EOFP'
          Phân tích lỗi FFmpeg Android ARM32 ver8 (LibASS).
          
          Trả về JSON OBJECT (KHÔNG ARRAY):
          {
            "error_id": "ERROR-XXX",
            "error_name": "Mô tả ngắn (max 10 từ)",
            "root_cause": "Nguyên nhân (max 100 từ)",
            "affected_library": "libass",
            "error_type": "DEPENDENCY|LINKER|CONFIGURE|SYNTAX|UNKNOWN",
            "symptoms": ["triệu chứng"],
            "fix_suggestion": "Cách fix (max 150 từ)",
            "confidence": 90
          }
          
          ===== ERROR CONTEXT (20 dòng trước exit code) =====
          
          EOFP
          
          cat error-context-20.txt >> prompt.txt
          
          if [ "$HAS_DETAIL" = "yes" ]; then
            cat >> prompt.txt << 'EOFD'
          
          ===== DETAIL LOG =====
          
          EOFD
            cat detail-log-content.txt >> prompt.txt
          fi
          
          ESCAPED=$(jq -Rs . < prompt.txt)
          
          cat > payload.json << EOFJ
          {"contents":[{"parts":[{"text":$ESCAPED}]}],"generationConfig":{"temperature":0.1,"maxOutputTokens":2048,"responseMimeType":"application/json"}}
          EOFJ
          
          # ========== RETRY LOGIC ==========
          MAX_RETRIES=5
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            echo "🔄 Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
            
            # Exponential backoff (2, 4, 8, 16, 32 seconds)
            if [ $RETRY_COUNT -gt 0 ]; then
              WAIT_TIME=$((2 ** RETRY_COUNT))
              echo "⏳ Waiting ${WAIT_TIME}s before retry..."
              sleep $WAIT_TIME
            fi
            
            # Call Gemini API
            RESP=$(curl -s -w "
HTTP:%{http_code}" -X POST \
              "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=$GEMINI_API_KEY" \
              -H "Content-Type: application/json" \
              --data-binary @payload.json \
              --connect-timeout 30 \
              --max-time 90)
            
            HTTP=$(echo "$RESP" | tail -n 1 | cut -d: -f2)
            BODY=$(echo "$RESP" | sed '$d')
            
            echo "📊 HTTP Status: $HTTP"
            
            # Check success
            if [ "$HTTP" = "200" ]; then
              AI=$(echo "$BODY" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)
              
              if [ -n "$AI" ] && [ "$AI" != "null" ]; then
                # Valid response
                if echo "$AI" | jq -e 'type == "array"' > /dev/null 2>&1; then
                  echo "$AI" | jq '.[0]' > ai.json
                else
                  echo "$AI" > ai.json
                fi
                
                # Validate JSON structure
                if jq -e '.error_id and .error_name and .affected_library' ai.json > /dev/null 2>&1; then
                  echo "✅ Valid AI response received"
                  SUCCESS=true
                else
                  echo "⚠️ Response missing required fields, retrying..."
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              else
                echo "⚠️ Empty response, retrying..."
                RETRY_COUNT=$((RETRY_COUNT + 1))
              fi
            else
              # HTTP error
              echo "❌ HTTP $HTTP: $(echo "$BODY" | jq -r '.error.message // "Unknown error"' 2>/dev/null || echo "Unknown error")"
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          # Fallback if all retries failed
          if [ "$SUCCESS" = "false" ]; then
            echo "💥 All $MAX_RETRIES attempts failed, using fallback"
            cat > ai.json << 'EOF'
          {"error_id":"ERROR-999","error_name":"API retry exhausted","root_cause":"Gemini API failed after 5 attempts","affected_library":"unknown","error_type":"API_ERROR","symptoms":["API timeout/error"],"fix_suggestion":"Check Gemini API key, quota, and network. Review log manually.","confidence":10}
          EOF
          fi
          
          cat ai.json
          
          echo "error_id=$(jq -r '.error_id // "ERROR-000"' ai.json)" >> $GITHUB_OUTPUT
          echo "error_name=$(jq -r '.error_name // "Unknown"' ai.json)" >> $GITHUB_OUTPUT
          echo "affected_lib=$(jq -r '.affected_library // "unknown"' ai.json)" >> $GITHUB_OUTPUT

      - name: Create Perplexity-friendly structure
        id: create_files
        run: |
          # Create logs directory structure (with spaces for SEO)
          mkdir -p "logs/Error Summaries"
          mkdir -p "logs/Detail Logs"
          
          # Generate filenames with spaces (Perplexity-friendly)
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          CLEAN_NAME=$(echo "$WORKFLOW_NAME" | sed 's/[()]//g' | sed 's/[^a-zA-Z0-9 -]/ /g' | sed 's/  */ /g' | xargs)
          RUN_NUM="${{ github.event.workflow_run.run_number }}"
          DATE=$(date +%Y%m%d)
          VERSION="${{ steps.extract_ver.outputs.version }}"
          
          SUMMARY_FILE="$CLEAN_NAME run$RUN_NUM $DATE.md"
          SUMMARY_PATH="logs/Error Summaries/$SUMMARY_FILE"
          
          # Create summary markdown
          DETAIL_LOG=$(cat detail-log-path.txt)
          
          cat > "$SUMMARY_PATH" << EOFSUMMARY
          # FFmpeg Build Error Summary
          
          ## Workflow Info
          
          - **Name:** ${{ github.event.workflow_run.name }}
          - **Run:** #${{ github.event.workflow_run.run_number }}
          - **Version:** $VERSION
          - **Date:** $(date "+%Y-%m-%d %H:%M:%S")
          - **Status:** Failed
          - **GitHub:** https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}
          
          ## AI Analysis (Gemini 2.0 Flash)
          
          ```json
          $(cat ai.json)
          ```
          
          ### Error Details
          
          **Error ID:** $(jq -r '.error_id' ai.json)
          **Error Name:** $(jq -r '.error_name' ai.json)
          **Affected Library:** $(jq -r '.affected_library' ai.json)
          **Error Type:** $(jq -r '.error_type' ai.json)
          **AI Confidence:** $(jq -r '.confidence' ai.json)%
          
          **Symptoms:**
          
          $(jq -r '.symptoms | map("- " + .) | join("
")' ai.json)
          
          **Root Cause:**
          
          $(jq -r '.root_cause' ai.json)
          
          **Fix Suggestion:**
          
          $(jq -r '.fix_suggestion' ai.json)
          
          ## Error Context (20 lines before exit code)
          
          ```
          $(cat error-context-20.txt)
          ```
          
          $(if [ -n "$DETAIL_LOG" ]; then
            echo "## Detail Log Reference"
            echo ""
            echo "```"
            echo "$DETAIL_LOG"
            echo "```"
            if [ -s detail-log-content.txt ]; then
              echo ""
              echo "### Detail Log Content"
              echo ""
              echo "```"
              cat detail-log-content.txt
              echo "```"
            fi
          fi)
          
          ---
          
          **For Perplexity:** Read this summary in the `logs/Error Summaries/` folder and suggest detailed fix steps.
          EOFSUMMARY
          
          # Save detail log if exists
          if [ -s detail-log-content.txt ]; then
            DETAIL_FILE="$(basename "$DETAIL_LOG" | sed 's/.txt//') $VERSION run$RUN_NUM.txt"
            cp detail-log-content.txt "logs/Detail Logs/$DETAIL_FILE"
            echo "detail_file=$DETAIL_FILE" >> $GITHUB_OUTPUT
          else
            echo "detail_file=" >> $GITHUB_OUTPUT
          fi
          
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "✅ Created: $SUMMARY_FILE"

      - name: Update Knowledge Base
        run: |
          KB_FILE="logs/Error Knowledge Base.md"
          
          # Create KB if not exists
          if [ ! -f "$KB_FILE" ]; then
            cat > "$KB_FILE" << 'EOF'
          # FFmpeg Android ARM32 - Error Knowledge Base
          
          > **Purpose:** Track all build errors for FFmpeg Android ARM32
          > **AI:** Gemini 2.0 Flash with detail log analysis
          > **Storage:** All logs in `/logs/` folder (Perplexity-optimized)
          > **Total Errors:** 0
          
          ## Quick Reference
          
          | ID | Error | Library | Version | Summary | Date |
          |----|-------|---------|---------|---------|------|
          
          ## Error Details
          
          EOF
          fi
          
          # Extract data
          ERROR_ID="${{ steps.ai_analysis.outputs.error_id }}"
          ERROR_NAME="${{ steps.ai_analysis.outputs.error_name }}"
          AFFECTED_LIB="${{ steps.ai_analysis.outputs.affected_lib }}"
          VERSION="${{ steps.extract_ver.outputs.version }}"
          SUMMARY_FILE="${{ steps.create_files.outputs.summary_file }}"
          DETAIL_FILE="${{ steps.create_files.outputs.detail_file }}"
          ROOT=$(jq -r '.root_cause // "N/A"' ai.json)
          TYPE=$(jq -r '.error_type // "UNKNOWN"' ai.json)
          FIX=$(jq -r '.fix_suggestion // "N/A"' ai.json)
          SYMP=$(jq -r '.symptoms // ["N/A"] | join(", ")' ai.json)
          CONF=$(jq -r '.confidence // 0' ai.json)
          
          # Update table
          sed -i "/^| ID | Error/a | $ERROR_ID | $ERROR_NAME | $AFFECTED_LIB | $VERSION | [`$SUMMARY_FILE`](Error Summaries/$SUMMARY_FILE) | $(date +%Y-%m-%d) |" "$KB_FILE"
          
          # Update total count (FIXED)
          TOTAL=$(grep -c "^### 🔴" "$KB_FILE" 2>/dev/null || echo "0")
          TOTAL=$(echo "$TOTAL" | head -n 1 | tr -d '

 ')
          NEW=$((TOTAL + 1))
          sed -i "s/Total Errors:** [0-9]*/Total Errors:** $NEW/" "$KB_FILE"
          
          # Add detail entry
          cat >> "$KB_FILE" << EOF
          
          ### 🔴 $ERROR_ID: $ERROR_NAME
          
          **📅 Date:** $(date +%Y-%m-%d)
          **🔗 GitHub:** [Run #${{ github.event.workflow_run.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})
          **🎯 Library:** `$AFFECTED_LIB`
          **🏷️ Version:** `$VERSION`
          **🤖 AI Confidence:** ${CONF}%
          **📄 Full Summary:** [`$SUMMARY_FILE`](Error Summaries/$SUMMARY_FILE)
          $(if [ -n "$DETAIL_FILE" ]; then
            echo "**📋 Detail Log:** [`$DETAIL_FILE`](Detail Logs/$DETAIL_FILE)"
          fi)
          
          **⚠️ Symptoms:** $SYMP
          **🔍 Root Cause:** $ROOT
          **🛠️ Fix Suggestion:** $FIX
          **📝 Type:** `$TYPE`
          
          ---
          
          EOF

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add logs/
          
          if ! git diff --staged --quiet; then
            git commit -m "🤖 ${{ steps.ai_analysis.outputs.error_id }}: ${{ steps.ai_analysis.outputs.error_name }} [${{ steps.extract_ver.outputs.version }}]"
            git push
            echo "✅ Pushed to logs/"
          fi

      - name: Summary
        if: always()
        run: |
          echo "## ✅ Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.extract_ver.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Error ID:** ${{ steps.ai_analysis.outputs.error_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Error Name:** ${{ steps.ai_analysis.outputs.error_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add retry warning if ERROR-999
          if [ "${{ steps.ai_analysis.outputs.error_id }}" = "ERROR-999" ]; then
            echo "⚠️ **Warning:** AI analysis failed after 5 retries. Manual review required." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 📁 Files Created" >> $GITHUB_STEP_SUMMARY
          echo "- Summary: `logs/Error Summaries/${{ steps.create_files.outputs.summary_file }}`" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.create_files.outputs.detail_file }}" ]; then
            echo "- Detail Log: `logs/Detail Logs/${{ steps.create_files.outputs.detail_file }}`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- KB: `logs/Error Knowledge Base.md`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 AI Analysis" >> $GITHUB_STEP_SUMMARY
          echo "```json" >> $GITHUB_STEP_SUMMARY
          cat ai.json >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **For Perplexity:** Search in `logs/` folder" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: rm -rf current-log/ current-log.zip full-log.txt error-context-20.txt detail-log-path.txt detail-log-content.txt prompt.txt payload.json ai.json 2>/dev/null || true