name: AI Knowledge Base (Retry-Enhanced)

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  actions: read
  contents: write

jobs:
  ai-analyze-error:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'failure' &&
      contains(github.event.workflow_run.name, 'ver') &&
      !contains(github.event.workflow_run.name, 'AI Knowledge Base')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download and analyze log
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/logs" \
            -o current-log.zip
          
          unzip -q current-log.zip -d current-log/
          find current-log/ -name "*.txt" -exec cat {} \; > full-log.txt
          TOTAL=$(wc -l < full-log.txt | tr -d '\n\r ')
          echo "📊 Total: $TOTAL lines"
          
          EXIT_LINE=$(grep -n "exit code [1-9]" full-log.txt | head -n 1 | cut -d: -f1)
          [ -z "$EXIT_LINE" ] && EXIT_LINE=$(grep -n "##\[error\]" full-log.txt | head -n 1 | cut -d: -f1)
          
          if [ -n "$EXIT_LINE" ]; then
            START=$((EXIT_LINE - 20))
            [ $START -lt 1 ] && START=1
            sed -n "${START},${EXIT_LINE}p" full-log.txt > error-context-20.txt
            
            DETAIL_LOG_PATH=$(grep -o "A full log can be found at .*" error-context-20.txt | head -n 1 | sed 's/A full log can be found at //' | tr -d '\r\n ')
            
            if [ -n "$DETAIL_LOG_PATH" ]; then
              echo "✅ Detail log: $DETAIL_LOG_PATH"
              echo "$DETAIL_LOG_PATH" > detail-log-path.txt
              
              DETAIL_LOG_NAME=$(basename "$DETAIL_LOG_PATH")
              if grep -q "$DETAIL_LOG_NAME" full-log.txt; then
                grep -A 100 "$DETAIL_LOG_NAME" full-log.txt | head -n 100 > detail-log-content.txt
              else
                touch detail-log-content.txt
              fi
            else
              touch detail-log-path.txt
              touch detail-log-content.txt
            fi
          else
            tail -n 20 full-log.txt > error-context-20.txt
            touch detail-log-path.txt
            touch detail-log-content.txt
          fi

      - name: Extract version
        id: extract_ver
        run: |
          VERSION=$(echo "${{ github.event.workflow_run.name }}" | grep -oE 'ver[0-9]+' || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Call Gemini with Retry Logic
        id: ai_analysis
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          HAS_DETAIL=$([ -s detail-log-content.txt ] && echo "yes" || echo "no")
          
          echo "Phân tích lỗi FFmpeg Android ARM32 ${{ steps.extract_ver.outputs.version }}." > prompt.txt
          echo "Trả về JSON OBJECT (KHÔNG ARRAY):" >> prompt.txt
          echo "{" >> prompt.txt
          echo '  "error_id": "ERROR-XXX",' >> prompt.txt
          echo '  "error_name": "Mô tả ngắn (max 10 từ)",' >> prompt.txt
          echo '  "root_cause": "Nguyên nhân (max 100 từ)",' >> prompt.txt
          echo '  "affected_library": "tên thư viện",' >> prompt.txt
          echo '  "error_type": "DEPENDENCY|LINKER|CONFIGURE|SYNTAX|UNKNOWN",' >> prompt.txt
          echo '  "symptoms": ["triệu chứng"],' >> prompt.txt
          echo '  "fix_suggestion": "Cách fix (max 150 từ)",' >> prompt.txt
          echo '  "confidence": 90' >> prompt.txt
          echo "}" >> prompt.txt
          echo "" >> prompt.txt
          echo "===== ERROR CONTEXT (20 dòng trước exit code) =====" >> prompt.txt
          cat error-context-20.txt >> prompt.txt
          
          if [ "$HAS_DETAIL" = "yes" ]; then
            echo "" >> prompt.txt
            echo "===== DETAIL LOG =====" >> prompt.txt
            cat detail-log-content.txt >> prompt.txt
          fi
          
          ESCAPED=$(jq -Rs . < prompt.txt)
          
          echo "{\"contents\":[{\"parts\":[{\"text\":$ESCAPED}]}],\"generationConfig\":{\"temperature\":0.1,\"maxOutputTokens\":2048,\"responseMimeType\":\"application/json\"}}" > payload.json
          
          MAX_RETRIES=5
          RETRY=0
          DELAY=2
          SUCCESS=0
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            echo "🔄 Gemini API attempt $((RETRY + 1))/$MAX_RETRIES..."
            
            RESP=$(curl -s -w "\nHTTP:%{http_code}" -X POST \
              "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=$GEMINI_API_KEY" \
              -H "Content-Type: application/json" \
              --data-binary @payload.json)
            
            HTTP=$(echo "$RESP" | tail -n 1 | cut -d: -f2)
            BODY=$(echo "$RESP" | sed '$d')
            
            if [ "$HTTP" = "200" ]; then
              AI=$(echo "$BODY" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null)
              
              if [ -n "$AI" ] && [ "$AI" != "null" ]; then
                if echo "$AI" | jq -e 'type' > /dev/null 2>&1; then
                  if echo "$AI" | jq -e 'type == "array"' > /dev/null 2>&1; then
                    echo "$AI" | jq '.[0]' > ai.json
                  else
                    echo "$AI" > ai.json
                  fi
                  
                  if jq -e '.error_id' ai.json > /dev/null 2>&1; then
                    echo "✅ Gemini API success on attempt $((RETRY + 1))"
                    SUCCESS=1
                    break
                  else
                    echo "⚠️  Invalid JSON structure, retrying..."
                  fi
                else
                  echo "⚠️  Response is not valid JSON, retrying..."
                fi
              else
                echo "⚠️  Empty response from Gemini, retrying..."
              fi
            else
              echo "❌ HTTP $HTTP error, retrying..."
            fi
            
            RETRY=$((RETRY + 1))
            
            if [ $RETRY -lt $MAX_RETRIES ]; then
              echo "⏳ Waiting ${DELAY}s before retry..."
              sleep $DELAY
              DELAY=$((DELAY * 2))
            fi
          done
          
          if [ $SUCCESS -eq 0 ]; then
            echo "💥 All $MAX_RETRIES Gemini API attempts failed. Using fallback."
            echo "{\"error_id\":\"ERROR-999\",\"error_name\":\"API Failed After Retries\",\"root_cause\":\"Gemini API không phản hồi sau $MAX_RETRIES lần thử\",\"affected_library\":\"unknown\",\"error_type\":\"API_ERROR\",\"symptoms\":[\"API timeout or error\"],\"fix_suggestion\":\"Kiểm tra GEMINI_API_KEY và quota. Review log thủ công.\",\"confidence\":10}" > ai.json
          fi
          
          cat ai.json
          echo "error_id=$(jq -r '.error_id // "ERROR-000"' ai.json)" >> $GITHUB_OUTPUT
          echo "error_name=$(jq -r '.error_name // "Unknown"' ai.json)" >> $GITHUB_OUTPUT
          echo "affected_lib=$(jq -r '.affected_library // "unknown"' ai.json)" >> $GITHUB_OUTPUT

      - name: Create Perplexity-friendly structure
        id: create_files
        run: |
          mkdir -p "logs/Error Summaries"
          mkdir -p "logs/Detail Logs"
          
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          CLEAN_NAME=$(echo "$WORKFLOW_NAME" | sed 's/[()]//g' | sed 's/[^a-zA-Z0-9 -]/ /g' | sed 's/  */ /g' | xargs)
          RUN_NUM="${{ github.event.workflow_run.run_number }}"
          DATE=$(date +%Y%m%d)
          VERSION="${{ steps.extract_ver.outputs.version }}"
          SUMMARY_FILE="$CLEAN_NAME run$RUN_NUM $DATE.md"
          SUMMARY_PATH="logs/Error Summaries/$SUMMARY_FILE"
          DETAIL_LOG=$(cat detail-log-path.txt)
          
          echo "# FFmpeg Build Error Summary" > "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "## Workflow Info" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "- **Name:** ${{ github.event.workflow_run.name }}" >> "$SUMMARY_PATH"
          echo "- **Run:** #${{ github.event.workflow_run.run_number }}" >> "$SUMMARY_PATH"
          echo "- **Version:** $VERSION" >> "$SUMMARY_PATH"
          echo "- **Date:** $(date '+%Y-%m-%d %H:%M:%S')" >> "$SUMMARY_PATH"
          echo "- **Status:** Failed" >> "$SUMMARY_PATH"
          echo "- **GitHub:** https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "## AI Analysis (Gemini 2.0 Flash)" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo '```
          cat ai.json >> "$SUMMARY_PATH"
          echo '```' >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "### Error Details" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Error ID:** $(jq -r '.error_id' ai.json)" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Error Name:** $(jq -r '.error_name' ai.json)" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Affected Library:** \`$(jq -r '.affected_library' ai.json)\`" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Error Type:** \`$(jq -r '.error_type' ai.json)\`" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**AI Confidence:** $(jq -r '.confidence' ai.json)%" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Symptoms:**" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          jq -r '.symptoms | map("- " + .) | join("\n")' ai.json >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Root Cause:**" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          jq -r '.root_cause' ai.json >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**Fix Suggestion:**" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          jq -r '.fix_suggestion' ai.json >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "## Error Context (20 lines before exit code)" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo '```
          cat error-context-20.txt >> "$SUMMARY_PATH"
          echo '```' >> "$SUMMARY_PATH"
          
          if [ -n "$DETAIL_LOG" ]; then
            echo "" >> "$SUMMARY_PATH"
            echo "## Detail Log Reference" >> "$SUMMARY_PATH"
            echo "" >> "$SUMMARY_PATH"
            echo '```
            echo "$DETAIL_LOG" >> "$SUMMARY_PATH"
            echo '```' >> "$SUMMARY_PATH"
            
            if [ -s detail-log-content.txt ]; then
              echo "" >> "$SUMMARY_PATH"
              echo "### Detail Log Content" >> "$SUMMARY_PATH"
              echo "" >> "$SUMMARY_PATH"
              echo '```
              cat detail-log-content.txt >> "$SUMMARY_PATH"
              echo '```' >> "$SUMMARY_PATH"
            fi
          fi
          
          echo "" >> "$SUMMARY_PATH"
          echo "---" >> "$SUMMARY_PATH"
          echo "" >> "$SUMMARY_PATH"
          echo "**For Perplexity:** Read this summary in the \`logs/Error Summaries/\` folder and suggest detailed fix steps." >> "$SUMMARY_PATH"
          
          if [ -s detail-log-content.txt ]; then
            DETAIL_FILE="$(basename "$DETAIL_LOG" | sed 's/\.txt//') $VERSION run$RUN_NUM.txt"
            cp detail-log-content.txt "logs/Detail Logs/$DETAIL_FILE"
            echo "detail_file=$DETAIL_FILE" >> $GITHUB_OUTPUT
          else
            echo "detail_file=" >> $GITHUB_OUTPUT
          fi
          
          echo "summary_file=$SUMMARY_FILE" >> $GITHUB_OUTPUT
          echo "✅ Created: $SUMMARY_FILE"

      - name: Update Knowledge Base
        run: |
          KB_FILE="logs/Error Knowledge Base.md"
          
          if [ ! -f "$KB_FILE" ]; then
            echo "# FFmpeg Android ARM32 - Error Knowledge Base" > "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "> **Purpose:** Track all build errors for FFmpeg Android ARM32" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "> **AI:** Gemini 2.0 Flash with retry logic and detail log analysis" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "> **Storage:** All logs in \`/logs/\` folder (Perplexity-optimized)" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "> **Total Errors:** 0" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "## Quick Reference" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "| ID | Error | Library | Version | Summary | Date |" >> "$KB_FILE"
            echo "|----|-------|---------|---------|---------|------|" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
            echo "## Error Details" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
          fi
          
          ERROR_ID="${{ steps.ai_analysis.outputs.error_id }}"
          ERROR_NAME="${{ steps.ai_analysis.outputs.error_name }}"
          AFFECTED_LIB="${{ steps.ai_analysis.outputs.affected_lib }}"
          VERSION="${{ steps.extract_ver.outputs.version }}"
          SUMMARY_FILE="${{ steps.create_files.outputs.summary_file }}"
          DETAIL_FILE="${{ steps.create_files.outputs.detail_file }}"
          ROOT=$(jq -r '.root_cause // "N/A"' ai.json)
          TYPE=$(jq -r '.error_type // "UNKNOWN"' ai.json)
          FIX=$(jq -r '.fix_suggestion // "N/A"' ai.json)
          SYMP=$(jq -r '.symptoms // ["N/A"] | join(", ")' ai.json)
          CONF=$(jq -r '.confidence // 0' ai.json)
          
          sed -i "/^| ID | Error/a | $ERROR_ID | $ERROR_NAME | $AFFECTED_LIB | $VERSION | [\`$SUMMARY_FILE\`](Error Summaries/$SUMMARY_FILE) | $(date +%Y-%m-%d) |" "$KB_FILE"
          
          TOTAL=$(grep -c "^### 🔴" "$KB_FILE" 2>/dev/null | head -n 1 | tr -d '\n\r ')
          NEW=$(( (${TOTAL:-0}) + 1 ))
          sed -i "s/Total Errors:\*\* [0-9]\+/Total Errors:** $NEW/" "$KB_FILE"
          
          echo "" >> "$KB_FILE"
          echo "### 🔴 $ERROR_ID: $ERROR_NAME" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**📅 Date:** $(date +%Y-%m-%d)" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🔗 GitHub:** [Run #${{ github.event.workflow_run.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🎯 Library:** \`$AFFECTED_LIB\`" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🏷️ Version:** \`$VERSION\`" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🤖 AI Confidence:** ${CONF}%" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**📄 Full Summary:** [\`$SUMMARY_FILE\`](Error Summaries/$SUMMARY_FILE)" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          
          if [ -n "$DETAIL_FILE" ]; then
            echo "**📋 Detail Log:** [\`$DETAIL_FILE\`](Detail Logs/$DETAIL_FILE)" >> "$KB_FILE"
            echo "" >> "$KB_FILE"
          fi
          
          echo "**⚠️ Symptoms:** $SYMP" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🔍 Root Cause:** $ROOT" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**🛠️ Fix Suggestion:** $FIX" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "**📝 Type:** \`$TYPE\`" >> "$KB_FILE"
          echo "" >> "$KB_FILE"
          echo "---" >> "$KB_FILE"

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add logs/
          
          if ! git diff --staged --quiet; then
            git commit -m "🤖 ${{ steps.ai_analysis.outputs.error_id }}: ${{ steps.ai_analysis.outputs.error_name }} [${{ steps.extract_ver.outputs.version }}]"
            git push
            echo "✅ Pushed to logs/"
          fi

      - name: Summary
        if: always()
        run: |
          echo "## ✅ Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.extract_ver.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Error ID:** ${{ steps.ai_analysis.outputs.error_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Error Name:** ${{ steps.ai_analysis.outputs.error_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Files Created" >> $GITHUB_STEP_SUMMARY
          echo "- Summary: \`logs/Error Summaries/${{ steps.create_files.outputs.summary_file }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.create_files.outputs.detail_file }}" ]; then
            echo "- Detail Log: \`logs/Detail Logs/${{ steps.create_files.outputs.detail_file }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- KB: \`logs/Error Knowledge Base.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🤖 AI Analysis" >> $GITHUB_STEP_SUMMARY
          echo '```
          cat ai.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **For Perplexity:** Search in \`logs/\` folder" >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          rm -rf current-log/ current-log.zip full-log.txt error-context-20.txt detail-log-path.txt detail-log-content.txt prompt.txt payload.json ai.json 2>/dev/null || true
