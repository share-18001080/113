name: Build FFmpeg Android ARM32 (Full Features + LibASS UNLOCKED & FIXED - ver8.1)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

jobs:
  build-ffmpeg-libass-unlocked:
    runs-on: ubuntu-latest
    timeout-minutes: 720

    env:
      ANDROID_API_LEVEL: 21
      ANDROID_ABI: armeabi-v7a
      NDK_VERSION: r25c
      FFMPEG_VERSION: n7.1
      MAKEFLAGS: -j$(nproc)

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android NDK r25c
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c
          add-to-path: true
          local-cache: false

      - name: Install Base Dependencies
        run: |
          sudo apt-get update

      - name: Install Build Tools
        run: |
          sudo apt-get install -y \
            build-essential yasm nasm pkg-config autoconf automake libtool

      - name: Install Development Tools
        run: |
          sudo apt-get install -y \
            git wget curl cmake ninja-build python3 python3-pip

      - name: Install Additional Tools
        run: |
          sudo apt-get install -y \
            gperf gettext texinfo flex bison ccache meson

      - name: Install System Libraries + LibASS Dependencies
        run: |
          sudo apt-get install -y \
            zip unzip libssl-dev zlib1g-dev libbz2-dev liblzma-dev
          # CRITICAL FIX: Install system font dependencies for LibASS stack
          sudo apt-get install -y \
            libfreetype6-dev libharfbuzz-dev libfontconfig1-dev

      - name: Setup CCCache
        run: |
          sudo /usr/sbin/update-ccache-symlinks
          echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc

      - name: Cache External Libraries
        uses: actions/cache@v4
        id: cache-external
        with:
          path: |
            external
            build/external
          key: external-libs-libass-unlocked-fixed-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-v2
          restore-keys: |
            external-libs-libass-unlocked-fixed-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-

      - name: Setup Build Environment
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          mkdir -p external build/external logs/{build,errors,success}
          cd external

          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          mkdir -p $PREFIX/{lib,include,lib/pkgconfig,bin,man/man3,inc}

          for tool in strings nm objdump strip readelf as ld; do
            ln -sf llvm-$tool $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-$tool
          done

          for tool in gcc ar ranlib; do
            ln -sf $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang $TOOLCHAIN_PATH/bin/arm-linux-androideabi-$tool
          done

      - name: Create LibASS/HarfBuzz/FreeType Cross-Compilation Configs
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export PREFIX=$(pwd)/../build/external

          # CRITICAL FIX: Create proper Meson cross-compilation file
          mkdir -p meson_cross
          echo "[binaries]" > meson_cross/android_cross.txt
          echo "c = '$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang'" >> meson_cross/android_cross.txt
          echo "cpp = '$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++'" >> meson_cross/android_cross.txt
          echo "ar = '$TOOLCHAIN_PATH/bin/llvm-ar'" >> meson_cross/android_cross.txt
          echo "strip = '$TOOLCHAIN_PATH/bin/llvm-strip'" >> meson_cross/android_cross.txt
          echo "pkg-config = 'pkg-config'" >> meson_cross/android_cross.txt
          echo "" >> meson_cross/android_cross.txt
          echo "[host_machine]" >> meson_cross/android_cross.txt
          echo "system = 'android'" >> meson_cross/android_cross.txt
          echo "cpu_family = 'arm'" >> meson_cross/android_cross.txt
          echo "cpu = 'armv7'" >> meson_cross/android_cross.txt
          echo "endian = 'little'" >> meson_cross/android_cross.txt
          echo "" >> meson_cross/android_cross.txt
          echo "[properties]" >> meson_cross/android_cross.txt
          echo "needs_exe_wrapper = true" >> meson_cross/android_cross.txt
          echo "c_args = ['-fPIC', '-DANDROID', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=neon', '-mthumb', '-Os']" >> meson_cross/android_cross.txt
          echo "cpp_args = ['-fPIC', '-DANDROID', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=neon', '-mthumb', '-Os']" >> meson_cross/android_cross.txt
          echo "c_link_args = ['-Wl,--gc-sections']" >> meson_cross/android_cross.txt
          echo "cpp_link_args = ['-Wl,--gc-sections']" >> meson_cross/android_cross.txt

      - name: Build Base Libraries (from all versions)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          echo "Building zlib..." | tee -a ../logs/build/base_libs.log
          wget -q https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz
          tar xzf zlib-1.3.tar.gz
          cd zlib-1.3
          ./configure --prefix=$PREFIX --static
          make -j$(nproc)
          make install
          cd ..

          echo "Building bzip2..." | tee -a ../logs/build/base_libs.log
          wget -q https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
          tar xzf bzip2-1.0.8.tar.gz
          cd bzip2-1.0.8
          make CC=$CC AR=$AR RANLIB=$RANLIB PREFIX=$PREFIX install
          cd ..

          echo "Building xz..." | tee -a ../logs/build/base_libs.log
          wget -q https://github.com/tukaani-project/xz/releases/download/v5.4.5/xz-5.4.5.tar.gz
          tar xzf xz-5.4.5.tar.gz
          cd xz-5.4.5
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --disable-doc --disable-scripts
          make -j$(nproc)
          make install
          cd ..

      - name: Build LibASS Dependencies Stack (FIX: FreeType ‚Üí HarfBuzz ‚Üí LibASS)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export PREFIX=$(pwd)/../build/external
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"

          echo "üîß STEP 1: Building FreeType2 (no HarfBuzz dependency)..." | tee -a ../logs/build/libass_stack.log
          git clone --depth 1 https://gitlab.freedesktop.org/freetype/freetype.git
          cd freetype
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=arm-linux-androideabi \
            --enable-static --disable-shared --without-harfbuzz
          make -j$(nproc) 2>&1 | tee -a ../../logs/build/freetype2_build.log
          if ! make install 2>&1 | tee -a ../../logs/build/freetype2_install.log; then
            echo "‚ùå FreeType2 build failed!" | tee -a ../../logs/errors/freetype2_failed.log
            exit 1
          fi
          cd ..

          echo "üîß STEP 2: Building HarfBuzz (with FreeType support)..." | tee -a ../logs/build/libass_stack.log
          git clone --depth 1 https://github.com/harfbuzz/harfbuzz.git
          cd harfbuzz
          meson setup builddir --cross-file ../meson_cross/android_cross.txt \
            --prefix=$PREFIX --default-library=static \
            -Dfreetype=enabled -Dglib=disabled -Dgobject=disabled \
            -Dcairo=disabled -Dicu=disabled -Dgraphite=disabled 2>&1 | tee -a ../../logs/build/harfbuzz_setup.log
          if ! ninja -C builddir 2>&1 | tee -a ../../logs/build/harfbuzz_build.log; then
            echo "‚ùå HarfBuzz build failed!" | tee -a ../../logs/errors/harfbuzz_failed.log
            exit 1
          fi
          ninja -C builddir install 2>&1 | tee -a ../../logs/build/harfbuzz_install.log
          cd ..

          echo "üîß STEP 3: Rebuild FreeType2 (with HarfBuzz support)..." | tee -a ../logs/build/libass_stack.log
          cd freetype
          make clean
          ./configure --prefix=$PREFIX --host=arm-linux-androideabi \
            --enable-static --disable-shared --with-harfbuzz
          make -j$(nproc) 2>&1 | tee -a ../../logs/build/freetype2_harfbuzz_build.log
          make install 2>&1 | tee -a ../../logs/build/freetype2_harfbuzz_install.log
          cd ..

          echo "üîß STEP 4: Building Fontconfig (for LibASS)..." | tee -a ../logs/build/libass_stack.log
          wget -q https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.14.2.tar.xz
          tar xf fontconfig-2.14.2.tar.xz
          cd fontconfig-2.14.2
          ./configure --prefix=$PREFIX --host=arm-linux-androideabi \
            --enable-static --disable-shared --disable-docs
          make -j$(nproc) 2>&1 | tee -a ../../logs/build/fontconfig_build.log
          make install 2>&1 | tee -a ../../logs/build/fontconfig_install.log
          cd ..

          echo "üîß STEP 5: Building LibASS (with ALL dependencies)..." | tee -a ../logs/build/libass_stack.log
          git clone --depth 1 https://github.com/libass/libass.git
          cd libass
          meson setup builddir --cross-file ../meson_cross/android_cross.txt \
            --prefix=$PREFIX --default-library=static \
            -Dfreetype=enabled -Dharfbuzz=enabled -Dfontconfig=enabled \
            -Drequire-system-font-provider=false \
            -Dlibunibreak=disabled -Ddirectwrite=disabled \
            -Dcoretext=disabled 2>&1 | tee -a ../../logs/build/libass_setup.log
          if ! ninja -C builddir 2>&1 | tee -a ../../logs/build/libass_build.log; then
            echo "‚ùå LibASS build failed!" | tee -a ../../logs/errors/libass_failed.log
            exit 1
          fi
          ninja -C builddir install 2>&1 | tee -a ../../logs/build/libass_install.log
          cd ..

          echo "‚úÖ LibASS stack build completed!" | tee -a ../logs/success/libass_success.log

      - name: Build Video Codecs (all versions)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          echo "Building x264..." | tee -a ../logs/build/video_codecs.log
          git clone --depth 1 https://code.videolan.org/videolan/x264.git
          cd x264
          ./configure --prefix=$PREFIX --host=$TARGET_HOST \
            --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
            --sysroot=$SYSROOT --enable-static --disable-cli \
            --enable-pic --disable-asm \
            --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS"
          make -j$(nproc)
          make install
          cd ..

          echo "Building x265..." | tee -a ../logs/build/video_codecs.log
          git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
          cd x265/build/linux
          sed -i '1i cmake_policy(SET CMP0074 OLD)' ../../source/CMakeLists.txt || true
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DENABLE_PIC=ON \
            -DENABLE_ASSEMBLY=OFF ../../source
          make -j$(nproc)
          make install
          cd ../../..

          echo "Building libvpx..." | tee -a ../logs/build/video_codecs.log
          git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
          cd libvpx
          ./configure --prefix=$PREFIX --target=armv7-android-gcc \
            --disable-examples --disable-docs --enable-vp8 --enable-vp9 \
            --enable-pic --disable-tools --disable-unit-tests \
            --enable-small --as=yasm
          make -j$(nproc)
          make install
          cd ..

      - name: Build Audio Codecs (all versions)
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # MP3 LAME
          echo "Building lame..." | tee -a ../logs/build/audio_codecs.log
          wget -q https://downloads.sourceforge.net/lame/lame-3.100.tar.gz
          tar xzf lame-3.100.tar.gz
          cd lame-3.100
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # Opus
          echo "Building opus..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/xiph/opus.git
          cd opus
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # Ogg + Vorbis
          echo "Building ogg..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/xiph/ogg.git
          cd ogg
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          echo "Building vorbis..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/xiph/vorbis.git
          cd vorbis
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # Speex
          echo "Building speex..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/xiph/speex.git
          cd speex
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # GSM (from ver1)
          echo "Building GSM..." | tee -a ../logs/build/audio_codecs.log
          wget -q http://www.quut.com/gsm/gsm-1.0.22.tar.gz
          tar xzf gsm-1.0.22.tar.gz
          cd gsm-1.0-pl22
          make CC=$CC AR=$AR RANLIB=$RANLIB CCFLAGS="$CFLAGS" PREFIX=$PREFIX install
          cd ..

          # FriBidi (from ver2)
          echo "Building FriBidi..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/fribidi/fribidi.git
          cd fribidi
          meson setup builddir --cross-file ../meson_cross/android_cross.txt \
            --prefix=$PREFIX --default-library=static
          ninja -C builddir
          ninja -C builddir install
          cd ..

          # Theora (from ver3)
          echo "Building theora..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/xiph/theora.git
          cd theora
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared \
            --disable-examples --disable-encode
          make -j$(nproc)
          make install
          cd ..

          # TwoLAME (from ver4)
          echo "Building twolame..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/njh/twolame.git
          cd twolame
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # FDK-AAC (from ver5)
          echo "Building fdk-aac..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git
          cd fdk-aac
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # LibAOM AV1 (from ver6)
          echo "Building libaom (AV1)..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://aomedia.googlesource.com/aom
          cd aom
          mkdir build && cd build
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF -DENABLE_EXAMPLES=OFF -DENABLE_TOOLS=OFF \
            -DENABLE_TESTS=OFF ..
          make -j$(nproc)
          make install
          cd ../..

          # LibSOXR (from ver7)
          echo "Building libsoxr..." | tee -a ../logs/build/audio_codecs.log
          git clone --depth 1 https://git.code.sf.net/p/soxr/code libsoxr
          cd libsoxr
          mkdir build && cd build
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF -DWITH_OPENMP=OFF -DWITH_LSR_BINDINGS=OFF \
            -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF ..
          make -j$(nproc)
          make install
          cd ../..

      - name: Build Additional Libraries
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export BUILD_HOST=x86_64-pc-linux-gnu
          export TARGET_HOST=arm-linux-androideabi
          export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
          export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
          export CPPFLAGS="-I$PREFIX/include"
          export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PATH=$TOOLCHAIN_PATH/bin:$PATH

          # WebP
          echo "Building libwebp..." | tee -a ../logs/build/additional_libs.log
          git clone --depth 1 https://chromium.googlesource.com/webm/libwebp
          cd libwebp
          ./autogen.sh
          ./configure --prefix=$PREFIX --host=$TARGET_HOST --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # OpenJPEG
          echo "Building libopenjpeg..." | tee -a ../logs/build/additional_libs.log
          git clone --depth 1 https://github.com/uclouvain/openjpeg.git
          cd openjpeg
          mkdir build && cd build
          cmake -G "Unix Makefiles" \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
            -DBUILD_SHARED_LIBS=OFF -DBUILD_CODEC=OFF ..
          make -j$(nproc)
          make install
          cd ../..

      - name: Verify All Libraries Status
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: |
          cd external
          export PREFIX=$(pwd)/../build/external

          echo "=== COMPLETE LIBRARY VERIFICATION (VER8.1 + LibASS) ===" | tee -a ../logs/build/verification.log
          ls -la $PREFIX/lib/ | tee -a ../logs/build/verification.log

          echo "=== PKG-CONFIG FILES ===" | tee -a ../logs/build/verification.log
          ls -la $PREFIX/lib/pkgconfig/ | tee -a ../logs/build/verification.log

          echo "=== ALL LIBRARIES STATUS ===" | tee -a ../logs/build/verification.log
          for lib in libx264.a libx265.a libvpx.a libopus.a libmp3lame.a libtwolame.a \
                     libvorbis.a libogg.a libtheora.a libtheoraenc.a libtheoradec.a \
                     libspeex.a libgsm.a libfribidi.a libwebp.a libfreetype.a \
                     libharfbuzz.a libass.a libfontconfig.a libaom.a libsoxr.a \
                     libopenjp2.a libz.a libbz2.a liblzma.a libfdk-aac.a; do
            if [ -f "$PREFIX/lib/$lib" ]; then
              echo "‚úÖ $lib: $(du -sh $PREFIX/lib/$lib | cut -f1)" | tee -a ../logs/success/lib_status.log
            else
              echo "‚ùå $lib: Missing" | tee -a ../logs/errors/lib_missing.log
            fi
          done

          # Save build status for FFmpeg configure
          echo "HAVE_FRIBIDI=$([ -f "$PREFIX/lib/libfribidi.a" ] && echo true || echo false)" > $PREFIX/build_status.env
          echo "HAVE_GSM=$([ -f "$PREFIX/lib/libgsm.a" ] && echo true || echo false)" >> $PREFIX/build_status.env  
          echo "HAVE_THEORA=$([ -f "$PREFIX/lib/libtheora.a" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_TWOLAME=$([ -f "$PREFIX/lib/libtwolame.a" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_FDK_AAC=$([ -f "$PREFIX/lib/libfdk-aac.a" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_LIBAOM=$([ -f "$PREFIX/lib/libaom.a" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_LIBSOXR=$([ -f "$PREFIX/lib/libsoxr.a" ] && echo true || echo false)" >> $PREFIX/build_status.env
          echo "HAVE_LIBASS=$([ -f "$PREFIX/lib/libass.a" ] && echo true || echo false)" >> $PREFIX/build_status.env

      - name: Clone FFmpeg
        run: |
          git clone --depth 1 --branch ${{ env.FFMPEG_VERSION }} https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          echo "Applying Android compatibility patches..." | tee -a ../logs/build/ffmpeg_patches.log
          sed -i 's/__builtin_assume_aligned//g' libavutil/mem.c || true
          sed -i 's/HAVE_BUILTIN_ASSUME_ALIGNED 1/HAVE_BUILTIN_ASSUME_ALIGNED 0/g' libavutil/mem.c || true
          find . -name "*.c" -exec sed -i 's/__restrict restrict//g' {} \; || true
          find . -name "*.h" -exec sed -i 's/__restrict restrict//g' {} \; || true

      - name: Create Build Directories
        run: |
          mkdir -p build/armeabi-v7a output/armeabi-v7a release

      - name: Configure FFmpeg (FULL FEATURES + LibASS UNLOCKED)
        working-directory: ffmpeg
        run: |
          export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
          export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
          export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
          export STRIP=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-strip
          export AR=$TOOLCHAIN_PATH/bin/llvm-ar
          export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
          export SYSROOT=$TOOLCHAIN_PATH/sysroot
          export PREFIX=$(pwd)/../build/external
          export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
          export PKG_CONFIG_LIBDIR="$PREFIX/lib/pkgconfig"

          # Load build status
          if [ -f "$PREFIX/build_status.env" ]; then
            source $PREFIX/build_status.env
          else
            HAVE_FRIBIDI=false
            HAVE_GSM=false
            HAVE_THEORA=false
            HAVE_TWOLAME=false
            HAVE_FDK_AAC=false
            HAVE_LIBAOM=false
            HAVE_LIBSOXR=false
            HAVE_LIBASS=false
          fi

          echo "=== VERIFYING ALL LIBRARIES (VER8.1 + LibASS) ===" | tee -a ../logs/build/ffmpeg_config.log
          ls -la $PREFIX/lib/ | tee -a ../logs/build/ffmpeg_config.log
          pkg-config --list-all | grep -E "(x264|x265|opus|vpx|ogg|vorbis|gsm|fribidi|theora|twolame|fdk-aac|aom|soxr|ass|freetype|harfbuzz|fontconfig)" || true

          # Complete base configuration with ALL libraries from ver1-7 + LibASS
          EXTRA_LIBS="-lmp3lame -lx264 -lx265 -lvpx -lopus -lvorbis -logg -lwebp -lspeex -lopenjp2 -lz -lbz2 -llzma -lstdc++ -lm -ldl -llog"
          ENABLE_LIBS="--enable-libx264 --enable-libx265 --enable-libvpx --enable-libopus --enable-libmp3lame --enable-libvorbis --enable-libwebp --enable-libspeex --enable-libopenjpeg"

          # Add all features from previous versions
          if [ "$HAVE_GSM" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lgsm"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libgsm"
            echo "‚úÖ GSM codec included (ver1)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_FRIBIDI" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lfribidi"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libfribidi"
            echo "‚úÖ FriBidi included (ver2)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_THEORA" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -ltheora -ltheoraenc -ltheoradec"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libtheora"
            echo "‚úÖ Theora included (ver3)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_TWOLAME" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -ltwolame"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libtwolame"
            echo "‚úÖ TwoLAME included (ver4)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_FDK_AAC" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lfdk-aac"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libfdk-aac"
            echo "‚úÖ FDK-AAC included (ver5)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_LIBAOM" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -laom"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libaom"
            echo "‚úÖ LibAOM AV1 included (ver6)" | tee -a ../logs/success/features_enabled.log
          fi

          if [ "$HAVE_LIBSOXR" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lsoxr"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libsoxr"
            echo "‚úÖ LibSOXR included (ver7)" | tee -a ../logs/success/features_enabled.log
          fi

          # NEW: Add LibASS support (UNLOCKED AND FIXED)
          if [ "$HAVE_LIBASS" = true ]; then
            EXTRA_LIBS="$EXTRA_LIBS -lass -lharfbuzz -lfreetype -lfontconfig"
            ENABLE_LIBS="$ENABLE_LIBS --enable-libass --enable-fontconfig"
            echo "üéØ LibASS UNLOCKED AND INCLUDED (ver8.1)" | tee -a ../logs/success/features_enabled.log
          else
            echo "‚ùå LibASS not available - build may have failed"
          fi

          echo "=== COMPLETE CONFIGURATION (VER8.1 + LibASS) ===" | tee -a ../logs/build/ffmpeg_config.log
          echo "ENABLE_LIBS: $ENABLE_LIBS" | tee -a ../logs/build/ffmpeg_config.log
          echo "EXTRA_LIBS: $EXTRA_LIBS" | tee -a ../logs/build/ffmpeg_config.log

          ./configure \
            --prefix=/tmp/ffmpeg \
            --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
            --sysroot=$SYSROOT \
            --target-os=android \
            --arch=armv7-a \
            --cpu=armv7-a \
            --cc=$CC \
            --cxx=$CXX \
            --ld=$CC \
            --ar=$AR \
            --ranlib=$RANLIB \
            --strip=$STRIP \
            --nm=$TOOLCHAIN_PATH/bin/llvm-nm \
            --enable-cross-compile \
            --disable-shared \
            --enable-static \
            --disable-debug \
            --disable-programs \
            --disable-doc \
            --disable-htmlpages \
            --disable-manpages \
            --disable-podpages \
            --disable-txtpages \
            --pkg-config-flags="--static" \
            --extra-cflags="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -I$PREFIX/include" \
            --extra-ldflags="-L$PREFIX/lib -Wl,--gc-sections" \
            --extra-libs="$EXTRA_LIBS" \
            $ENABLE_LIBS 2>&1 | tee ../logs/build/ffmpeg_configure.log

          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "‚ùå FFmpeg configuration failed!" | tee -a ../logs/errors/ffmpeg_configure_failed.log
            echo "Configuration log:" | tee -a ../logs/errors/ffmpeg_configure_failed.log
            tail -50 config.log | tee -a ../logs/errors/ffmpeg_configure_failed.log
            exit 1
          fi

      - name: Build FFmpeg
        run: |
          cd ffmpeg
          echo "üî® Building FFmpeg with ALL features + LibASS..." | tee -a ../logs/build/ffmpeg_build_start.log
          if make -j$(nproc) 2>&1 | tee ../logs/build/ffmpeg_parallel_build.log; then
            echo "‚úÖ FFmpeg parallel build successful!" | tee -a ../logs/success/ffmpeg_parallel_build.log
          else
            echo "‚ö†Ô∏è Parallel build failed, trying single-threaded..." | tee -a ../logs/errors/ffmpeg_parallel_failed.log
            make clean
            if make 2>&1 | tee ../logs/build/ffmpeg_single_build.log; then
              echo "‚úÖ FFmpeg single-threaded build successful!" | tee -a ../logs/success/ffmpeg_single_build.log
            else
              echo "‚ùå FFmpeg build failed completely!" | tee -a ../logs/errors/ffmpeg_build_failed.log
              exit 1
            fi
          fi
          echo "Build completed at: $(date)" | tee -a ../logs/build/ffmpeg_build_end.log

      - name: Install and Package
        run: |
          cd ffmpeg
          make install 2>&1 | tee ../logs/build/ffmpeg_install.log

          # Create release directory and copy binaries
          mkdir -p ../release
          cp /tmp/ffmpeg/bin/* ../release/ 2>/dev/null || true
          cp /tmp/ffmpeg/lib/* ../release/ 2>/dev/null || true

          # Copy build info
          cd ../release

          # Check file status
          echo "‚úÖ LIBASS_STATUS=$([ -f "../build/external/lib/libass.a" ] && echo "ENABLED & WORKING" || echo "FAILED")"
          echo "‚úÖ SOXR_STATUS=$([ -f "../build/external/lib/libsoxr.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ FDK_AAC_STATUS=$([ -f "../build/external/lib/libfdk-aac.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ GSM_STATUS=$([ -f "../build/external/lib/libgsm.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ FRIBIDI_STATUS=$([ -f "../build/external/lib/libfribidi.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ THEORA_STATUS=$([ -f "../build/external/lib/libtheora.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ TWOLAME_STATUS=$([ -f "../build/external/lib/libtwolame.a" ] && echo "ENABLED" || echo "DISABLED")"
          echo "‚úÖ LIBAOM_STATUS=$([ -f "../build/external/lib/libaom.a" ] && echo "ENABLED" || echo "DISABLED")"

          LIBASS_STATUS=$([ -f "../build/external/lib/libass.a" ] && echo "ENABLED & WORKING" || echo "FAILED")
          SOXR_STATUS=$([ -f "../build/external/lib/libsoxr.a" ] && echo "ENABLED" || echo "DISABLED")
          FDK_AAC_STATUS=$([ -f "../build/external/lib/libfdk-aac.a" ] && echo "ENABLED" || echo "DISABLED")
          GSM_STATUS=$([ -f "../build/external/lib/libgsm.a" ] && echo "ENABLED" || echo "DISABLED")
          FRIBIDI_STATUS=$([ -f "../build/external/lib/libfribidi.a" ] && echo "ENABLED" || echo "DISABLED")
          THEORA_STATUS=$([ -f "../build/external/lib/libtheora.a" ] && echo "ENABLED" || echo "DISABLED")
          TWOLAME_STATUS=$([ -f "../build/external/lib/libtwolame.a" ] && echo "ENABLED" || echo "DISABLED")
          LIBAOM_STATUS=$([ -f "../build/external/lib/libaom.a" ] && echo "ENABLED" || echo "DISABLED")

          echo "FFmpeg Android COMPLETE Build (ver8.1 + LibASS UNLOCKED & FIXED)" > BUILD_INFO.txt
          echo "======================================================================" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üéØ NEWLY UNLOCKED & FIXED: LibASS - $LIBASS_STATUS" >> BUILD_INFO.txt
          echo "üì¶ ALL PREVIOUS FEATURES INCLUDED FROM VER1-7" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "Version: ${{ env.FFMPEG_VERSION }}" >> BUILD_INFO.txt
          echo "Target: ${{ env.ANDROID_ABI }}" >> BUILD_INFO.txt
          echo "API Level: ${{ env.ANDROID_API_LEVEL }}" >> BUILD_INFO.txt
          echo "NDK: ${{ env.NDK_VERSION }}" >> BUILD_INFO.txt
          echo "Built: $(date)" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üé≠ LibASS Features (NEWLY UNLOCKED & FIXED):" >> BUILD_INFO.txt
          echo "- Advanced Subtitle Rendering (ASS/SSA)" >> BUILD_INFO.txt
          echo "- Harfbuzz Text Shaping (RTL/LTR support)" >> BUILD_INFO.txt
          echo "- FreeType Font Rendering" >> BUILD_INFO.txt
          echo "- Fontconfig System Font Support" >> BUILD_INFO.txt
          echo "- Full Typography Control" >> BUILD_INFO.txt
          echo "- Animation and Effects Support" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üì∫ Video Codecs:" >> BUILD_INFO.txt
          echo "- H.264 (libx264)" >> BUILD_INFO.txt
          echo "- H.265/HEVC (libx265)" >> BUILD_INFO.txt
          echo "- VP8/VP9 (libvpx)" >> BUILD_INFO.txt
          echo "- AV1 (libaom) - $LIBAOM_STATUS" >> BUILD_INFO.txt
          echo "- Theora (libtheora) - $THEORA_STATUS" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üéµ Audio Codecs:" >> BUILD_INFO.txt
          echo "- AAC (FDK-AAC) - $FDK_AAC_STATUS" >> BUILD_INFO.txt
          echo "- MP3 (LAME)" >> BUILD_INFO.txt
          echo "- MP2 (TwoLAME) - $TWOLAME_STATUS" >> BUILD_INFO.txt
          echo "- Opus" >> BUILD_INFO.txt
          echo "- Vorbis" >> BUILD_INFO.txt
          echo "- Speex" >> BUILD_INFO.txt
          echo "- GSM - $GSM_STATUS" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üîß Audio Processing:" >> BUILD_INFO.txt
          echo "- LibSOXR (High-quality resampling) - $SOXR_STATUS" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üìÑ Text & Subtitles:" >> BUILD_INFO.txt
          echo "- LibASS (Advanced subtitle rendering) - $LIBASS_STATUS" >> BUILD_INFO.txt
          echo "- FriBidi (bidirectional text) - $FRIBIDI_STATUS" >> BUILD_INFO.txt
          echo "- Harfbuzz (text shaping) - $LIBASS_STATUS" >> BUILD_INFO.txt
          echo "- FreeType (font rendering) - $LIBASS_STATUS" >> BUILD_INFO.txt
          echo "- Fontconfig (system fonts) - $LIBASS_STATUS" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üñºÔ∏è Images:" >> BUILD_INFO.txt
          echo "- WebP images" >> BUILD_INFO.txt
          echo "- JPEG 2000 (OpenJPEG)" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üóúÔ∏è Compression:" >> BUILD_INFO.txt
          echo "- zlib, bzip2, lzma" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "üì¶ Container Formats:" >> BUILD_INFO.txt
          echo "- MP4, MOV, MKV, WebM, AVI, 3GP, OGG, OGV" >> BUILD_INFO.txt
          echo "" >> BUILD_INFO.txt
          echo "‚úÖ ALL LIBRARIES + LibASS SUCCESSFULLY UNLOCKED & FIXED!" >> BUILD_INFO.txt

      - name: Upload Enhanced Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-libass-unlocked-fixed
          path: logs/
          retention-days: 7

      - name: Upload Complete Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-android-libass-unlocked-fixed
          path: release/
          retention-days: 30

      - name: Complete Build Summary
        run: |
          echo "## üéØ FFmpeg Android COMPLETE Build (ver8.1 + LibASS UNLOCKED & FIXED)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "release/ffmpeg" ]; then
            echo "### ‚úÖ BUILD SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Binary Size**: $(du -sh release/ffmpeg | cut -f1)" >> $GITHUB_STEP_SUMMARY
            echo "- **All previous features**: ‚úÖ Included" >> $GITHUB_STEP_SUMMARY
            echo "- **LibASS (NEW)**: üéØ Successfully unlocked and fixed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Complete Feature Set" >> $GITHUB_STEP_SUMMARY
          echo "- **Video**: H.264, H.265, VP8/9, AV1, Theora" >> $GITHUB_STEP_SUMMARY
          echo "- **Audio**: AAC (FDK), MP3, MP2, Opus, Vorbis, Speex, GSM" >> $GITHUB_STEP_SUMMARY
          echo "- **Audio Processing**: LibSOXR - High-quality resampling" >> $GITHUB_STEP_SUMMARY
          echo "- **Subtitles**: LibASS (NEW) - Advanced subtitle rendering" >> $GITHUB_STEP_SUMMARY
          echo "- **Text**: Bidirectional text support (FriBidi), Text shaping (HarfBuzz)" >> $GITHUB_STEP_SUMMARY
          echo "- **Fonts**: FreeType rendering, Fontconfig system font support" >> $GITHUB_STEP_SUMMARY
          echo "- **Images**: WebP, JPEG2000" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Libraries**: 20+ external codecs + LibASS stack" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    needs: build-ffmpeg-libass-unlocked
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Complete Build Status
        run: |
          if [ "${{ needs.build-ffmpeg-libass-unlocked.result }}" == "success" ]; then
            echo "üéâ SUCCESS: Complete FFmpeg build with ALL features + LibASS UNLOCKED & FIXED!"
            echo "üì± Ready for Android deployment with full subtitle rendering support"
            echo "üé≠ LibASS successfully unlocked with HarfBuzz + FreeType + Fontconfig stack (ver8.1)"
          else
            echo "‚ùå FAILED: Complete build encountered errors"
            echo "üìã Check build logs for details"
          fi
