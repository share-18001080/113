name: "Build FFmpeg Android ARM32 (Complete Features + LibASS UNLOCKED - ver8.2-FIXED)"

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  actions: read

jobs:
  build-ffmpeg-maximum:
    runs-on: ubuntu-latest
    timeout-minutes: 720 # Tăng timeout lên 12 tiếng
    
    env:
      ANDROID_API_LEVEL: 21
      ANDROID_ABI: armeabi-v7a
      NDK_VERSION: r25c
      FFMPEG_VERSION: n7.1
      MAKEFLAGS: -j$(nproc)

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Java JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android NDK r25c
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        add-to-path: true
        local-cache: false

    - name: Install Base Dependencies
      run: |
        sudo apt-get update
        
    - name: Install Build Tools
      run: |
        sudo apt-get install -y \
          build-essential yasm nasm pkg-config autoconf automake libtool

    - name: Install Development Tools
      run: |
        sudo apt-get install -y \
          git wget curl cmake ninja-build python3 python3-pip

    - name: Install Additional Tools
      run: |
        sudo apt-get install -y \
          gperf gettext texinfo flex bison ccache meson

    - name: Install System Libraries
      run: |
        sudo apt-get install -y \
          zip unzip libssl-dev zlib1g-dev libbz2-dev liblzma-dev

    - name: Setup CCCache
      run: |
        sudo /usr/sbin/update-ccache-symlinks
        echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc

    - name: Setup Enhanced Logging
      run: |
        mkdir -p logs/{configure,build,external-libs,errors,success}
        echo "Enhanced logging structure created" > logs/build_info.txt
        echo "Build started: $(date)" >> logs/build_info.txt

    - name: Cache External Libraries
      uses: actions/cache@v4
      id: cache-external
      with:
        path: |
          external
          build/external
        key: external-libs-complete-libass-ver8.2-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-v1
        restore-keys: |
          external-libs-complete-libass-ver8.2-${{ env.NDK_VERSION }}-${{ env.ANDROID_ABI }}-

    - name: Setup Build Environment
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        mkdir -p external build/external
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export PATH=$TOOLCHAIN_PATH/bin:$PATH
        mkdir -p $PREFIX/{lib,include,lib/pkgconfig,bin,man/man3,inc}
        
        # Setup toolchain symlinks
        for tool in strings nm objdump strip readelf as ld; do
          ln -sf llvm-$tool $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-$tool
        done
        
        for tool in gcc ar ranlib; do  
          ln -sf $TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang $TOOLCHAIN_PATH/bin/arm-linux-androideabi-$tool
        done

    - name: Build Base Libraries
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "Building zlib..." | tee -a ../logs/external-libs/base_libs.log
        wget -q https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz
        tar xzf zlib-1.3.tar.gz
        cd zlib-1.3
        ./configure --prefix=$PREFIX --static 2>&1 | tee -a ../../logs/configure/zlib_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/zlib_build.log
        make install 2>&1 | tee -a ../../logs/build/zlib_install.log
        cd ..

        echo "Building bzip2..." | tee -a ../logs/external-libs/base_libs.log
        wget -q https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
        tar xzf bzip2-1.0.8.tar.gz
        cd bzip2-1.0.8
        make CC=$CC AR=$AR RANLIB=$RANLIB PREFIX=$PREFIX install 2>&1 | tee -a ../../logs/build/bzip2_build.log
        cd ..

        echo "Building xz..." | tee -a ../logs/external-libs/base_libs.log
        wget -q https://github.com/tukaani-project/xz/releases/download/v5.4.5/xz-5.4.5.tar.gz
        tar xzf xz-5.4.5.tar.gz
        cd xz-5.4.5
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-doc --disable-scripts 2>&1 | tee -a ../../logs/configure/xz_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/xz_build.log
        make install 2>&1 | tee -a ../../logs/build/xz_install.log
        cd ..

    - name: Build Video Codecs
      if: steps.cache-external.outputs.cache-hit != 'true'  
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "Building x264..." | tee -a ../logs/external-libs/video_codecs.log
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --prefix=$PREFIX --host=$TARGET_HOST \
          --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
          --sysroot=$SYSROOT --enable-static --disable-cli \
          --enable-pic --disable-asm \
          --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS" 2>&1 | tee -a ../../logs/configure/x264_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/x264_build.log
        make install 2>&1 | tee -a ../../logs/build/x264_install.log
        cd ..

        echo "Building x265..." | tee -a ../logs/external-libs/video_codecs.log
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build/linux
        # Fix CMake compatibility
        sed -i '1i cmake_policy(SET CMP0074 OLD)' ../../source/CMakeLists.txt || true
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DENABLE_SHARED=OFF -DENABLE_CLI=OFF -DENABLE_PIC=ON \
          -DENABLE_ASSEMBLY=OFF -DCMAKE_CXX_FLAGS="$CXXFLAGS -Wno-unused-parameter" \
          ../../source 2>&1 | tee -a ../../../logs/configure/x265_config.log
        make -j$(nproc) 2>&1 | tee -a ../../../logs/build/x265_build.log
        make install 2>&1 | tee -a ../../../logs/build/x265_install.log
        # Create pkg-config file
        echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/x265.pc
        echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Name: x265" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Description: H.265/HEVC video encoder" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Version: 3.5" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Libs: -L\${libdir} -lx265" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Libs.private: -lstdc++ -lm -ldl" >> $PREFIX/lib/pkgconfig/x265.pc
        echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/x265.pc
        cd ../../..

        echo "Building libvpx..." | tee -a ../logs/external-libs/video_codecs.log
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        unset AS ASFLAGS
        export AS=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export ASFLAGS="-c"
        ./configure --target=armv7-android-gcc --prefix=$PREFIX \
          --disable-shared --enable-static --enable-pic \
          --disable-examples --disable-docs --disable-unit-tests \
          --disable-tools --disable-runtime-cpu-detect --disable-neon-asm 2>&1 | tee -a ../../logs/configure/libvpx_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/libvpx_build.log
        make install 2>&1 | tee -a ../../logs/build/libvpx_install.log
        cd ..

    - name: Build LibAV1 (from ver6-7) 
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🎯 Building LibAV1 (from ver6-7)..." | tee -a ../logs/external-libs/libav1.log
        git clone --depth 1 https://aomedia.googlesource.com/aom.git libaom
        cd libaom
        mkdir -p build_android
        cd build_android
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DBUILD_SHARED_LIBS=OFF \
          -DENABLE_DOCS=OFF \
          -DENABLE_EXAMPLES=OFF \
          -DENABLE_TESTDATA=OFF \
          -DENABLE_TESTS=OFF \
          -DENABLE_TOOLS=OFF \
          -DCONFIG_AV1_DECODER=1 \
          -DCONFIG_AV1_ENCODER=1 \
          -DCONFIG_MULTITHREAD=1 \
          -DCONFIG_PIC=1 \
          -DCONFIG_RUNTIME_CPU_DETECT=0 \
          -DCONFIG_WEBM_IO=0 \
          -DAOM_TARGET_CPU=arm \
          -DCMAKE_ASM_COMPILER=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang \
          -DCMAKE_C_FLAGS="$CFLAGS -DNDEBUG -Wno-unused-function -Wno-unused-parameter" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS -DNDEBUG -Wno-unused-function -Wno-unused-parameter" \
          .. 2>&1 | tee -a ../../../logs/configure/libaom_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../../logs/build/libaom_build.log; then
          echo "✅ LibAV1 parallel build succeeded" | tee -a ../../../logs/success/libaom.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../../logs/errors/libaom_parallel_failed.log
          make clean
          if make V=1 2>&1 | tee -a ../../../logs/build/libaom_single_build.log; then
            echo "✅ LibAV1 single-threaded build succeeded" | tee -a ../../../logs/success/libaom.log
          else
            echo "⚠️ Build failed, trying with reduced optimizations..." | tee -a ../../../logs/errors/libaom_single_failed.log
            make clean
            cmake -DCMAKE_C_FLAGS="$CFLAGS -O1 -DNDEBUG" -DCMAKE_CXX_FLAGS="$CXXFLAGS -O1 -DNDEBUG" .. 2>&1 | tee -a ../../../logs/configure/libaom_fallback_config.log
            make V=1 2>&1 | tee -a ../../../logs/build/libaom_fallback_build.log || echo "❌ LibAV1 build failed completely" | tee -a ../../../logs/errors/libaom_complete_failure.log
          fi
        fi

        if make install 2>/dev/null; then
          echo "✅ LibAV1 installation successful" | tee -a ../../../logs/success/libaom_install.log
        else
          echo "⚠️ Standard installation failed, trying manual installation..." | tee -a ../../../logs/errors/libaom_install_failed.log
          mkdir -p $PREFIX/lib $PREFIX/include
          if [ -f "libaom.a" ]; then
            cp libaom.a $PREFIX/lib/ && echo "✅ LibAV1 library copied manually" | tee -a ../../../logs/success/libaom_manual.log
          elif find . -name "libaom.a" -exec cp {} $PREFIX/lib/ \; 2>/dev/null; then
            echo "✅ LibAV1 library found and copied" | tee -a ../../../logs/success/libaom_manual.log
          else
            echo "❌ LibAV1 library not found" | tee -a ../../../logs/errors/libaom_library_missing.log
          fi
          if [ -d "../aom" ]; then
            cp -r ../aom $PREFIX/include/ 2>/dev/null || echo "Headers copy attempted" | tee -a ../../../logs/build/libaom_headers.log
          fi
        fi

        # Create pkg-config file if library exists
        if [ -f "$PREFIX/lib/libaom.a" ]; then
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/aom.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Name: aom" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Description: AV1 Video Codec Library" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Version: 3.0.0" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Libs: -L\${libdir} -laom" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Libs.private: -lstdc++ -lm -ldl" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/aom.pc
          echo "✅ LibAV1 successfully built!" | tee -a ../../../logs/success/libaom_complete.log
        else
          echo "❌ LibAV1 build failed" | tee -a ../../../logs/errors/libaom_final_failure.log
        fi
        cd ../..

    - name: Build Audio Codecs - Part 1 (FDK-AAC Fixed from ver5)
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🎯 Building FDK-AAC (from ver5)..." | tee -a ../logs/external-libs/fdk_aac.log
        git clone --depth 1 https://github.com/mstorsjo/fdk-aac.git
        cd fdk-aac

        # Apply C++ syntax fixes from ver5
        find . -name "*.cpp" -exec sed -i 's/<<;=/<<= /g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/>>=/>>= /g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/>>;/>> ;/g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/<<;/<< ;/g' {} \; || true

        # Specific fixes for known problematic files
        if [ -f "libAACdec/src/aacdec_hcr.cpp" ]; then
          sed -i 's/escape_word <<;=/escape_word <<= /g' libAACdec/src/aacdec_hcr.cpp || true
          sed -i 's/escape_word >>;/escape_word >> ;/g' libAACdec/src/aacdec_hcr.cpp || true
          sed -i 's/carryBit <<;=/carryBit <<= /g' libAACdec/src/aacdec_hcr.cpp || true
        fi

        # General syntax fixes
        find . -name "*.cpp" -exec sed -i 's/value <<;=/value <<= /g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/bits >>;=/bits >>= /g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/data <<;=/data <<= /g' {} \; || true
        find . -name "*.cpp" -exec sed -i 's/tmp >>;=/tmp >>= /g' {} \; || true
        find . -name "*.h" -exec sed -i 's/<<;=/<<= /g' {} \; || true
        find . -name "*.h" -exec sed -i 's/>>=/>>= /g' {} \; || true

        ./autogen.sh 2>&1 | tee -a ../../logs/build/fdk_aac_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --with-pic \
          --disable-example \
          CXX="$CXX -std=c++11 -Wno-shift-count-overflow -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -Wno-narrowing -fpermissive" \
          CXXFLAGS="$CXXFLAGS -Wno-shift-count-overflow -Wno-unused-parameter -Wno-unused-variable -Wno-sign-compare -Wno-narrowing -fpermissive" 2>&1 | tee -a ../../logs/configure/fdk_aac_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../logs/build/fdk_aac_build.log; then
          echo "✅ Parallel build succeeded" | tee -a ../../logs/success/fdk_aac.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/fdk_aac_parallel_failed.log
          make clean
          make V=1 2>&1 | tee -a ../../logs/build/fdk_aac_single_build.log || echo "Single-threaded also failed" | tee -a ../../logs/errors/fdk_aac_single_failed.log
        fi

        if make install 2>/dev/null; then
          echo "✅ FDK-AAC installation successful" | tee -a ../../logs/success/fdk_aac_install.log
        else
          echo "⚠️ Manual installation..." | tee -a ../../logs/errors/fdk_aac_install_failed.log
          mkdir -p $PREFIX/lib $PREFIX/include
          if [ -f ".libs/libfdk-aac.a" ]; then
            cp .libs/libfdk-aac.a $PREFIX/lib/ && echo "✅ Library copied" | tee -a ../../logs/success/fdk_aac_manual.log
          fi
          [ -f "libAACenc/include/aacenc_lib.h" ] && cp libAACenc/include/aacenc_lib.h $PREFIX/include/
          [ -f "libAACdec/include/aacdecoder_lib.h" ] && cp libAACdec/include/aacdecoder_lib.h $PREFIX/include/
          [ -f "libFDK/include/FDK_audio.h" ] && cp libFDK/include/FDK_audio.h $PREFIX/include/
        fi

        # Create pkg-config file if library exists
        if [ -f "$PREFIX/lib/libfdk-aac.a" ]; then
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Name: fdk-aac" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Description: Fraunhofer FDK AAC Codec Library" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Version: 2.0.0" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Libs: -L\${libdir} -lfdk-aac" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Libs.private: -lm" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/fdk-aac.pc
          echo "✅ FDK-AAC configured!" | tee -a ../../logs/success/fdk_aac_complete.log
        fi
        cd ..

        echo "Building opus..." | tee -a ../logs/external-libs/audio_codecs.log
        git clone --depth 1 https://github.com/xiph/opus.git
        cd opus
        ./autogen.sh 2>&1 | tee -a ../../logs/build/opus_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-doc \
          --disable-extra-programs --enable-fixed-point --disable-intrinsics 2>&1 | tee -a ../../logs/configure/opus_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/opus_build.log
        make install 2>&1 | tee -a ../../logs/build/opus_install.log
        cd ..

    - name: Build Audio Codecs - Part 2
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "Building LAME..." | tee -a ../logs/external-libs/audio_codecs.log
        wget -q https://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz || \
        wget -q https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz
        tar xzf lame-3.100.tar.gz
        cd lame-3.100

        # Fix for Android config
        wget -q -O config.sub 'https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' || {
          sed -i 's/| android/| android | androideabi/g' config.sub
          sed -i '/android/a\ androideabi)' config.sub
          sed -i '/androideabi)/a\ basic_machine=arm-unknown' config.sub
          sed -i '/basic_machine=arm-unknown/a\ os=-linux-androideabi' config.sub
          sed -i '/os=-linux-androideabi/a\ ;;' config.sub
        }
        chmod +x config.sub config.guess

        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-frontend \
          --disable-decoder --disable-dependency-tracking --with-pic \
          CFLAGS="$CFLAGS -DHAVE_CONFIG_H -fno-fast-math -Wno-unused-function" 2>&1 | tee -a ../../logs/configure/lame_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/lame_build.log || { make clean; make 2>&1 | tee -a ../../logs/build/lame_single_build.log; }
        make install 2>&1 | tee -a ../../logs/build/lame_install.log
        cd ..

    - name: Build LibSOXR (from ver7)
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🎯 Building LibSOXR (from ver7)..." | tee -a ../logs/external-libs/libsoxr.log
        git clone --depth 1 https://git.code.sf.net/p/soxr/code libsoxr
        cd libsoxr
        mkdir -p build_android
        cd build_android
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_TESTS=OFF \
          -DBUILD_EXAMPLES=OFF \
          -DWITH_OPENMP=OFF \
          -DWITH_LSR_BINDINGS=OFF \
          -DCMAKE_C_FLAGS="$CFLAGS -DNDEBUG" \
          -DCMAKE_CXX_FLAGS="$CXXFLAGS -DNDEBUG" \
          .. 2>&1 | tee -a ../../../logs/configure/libsoxr_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../../logs/build/libsoxr_build.log; then
          echo "✅ LibSOXR parallel build succeeded" | tee -a ../../../logs/success/libsoxr.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../../logs/errors/libsoxr_parallel_failed.log
          make clean
          make V=1 2>&1 | tee -a ../../../logs/build/libsoxr_single_build.log || echo "❌ LibSOXR build failed" | tee -a ../../../logs/errors/libsoxr_failed.log
        fi

        if make install 2>/dev/null; then
          echo "✅ LibSOXR installation successful" | tee -a ../../../logs/success/libsoxr_install.log
        else
          echo "⚠️ Manual installation..." | tee -a ../../../logs/errors/libsoxr_install_failed.log
          mkdir -p $PREFIX/lib $PREFIX/include
          if [ -f "src/libsoxr.a" ]; then
            cp src/libsoxr.a $PREFIX/lib/ && echo "✅ Library copied" | tee -a ../../../logs/success/libsoxr_manual.log
          fi
          if [ -f "../src/soxr.h" ]; then
            cp ../src/soxr.h $PREFIX/include/
          fi
        fi

        # Create pkg-config file if library exists
        if [ -f "$PREFIX/lib/libsoxr.a" ]; then
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/soxr.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Name: soxr" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Description: High quality, one-dimensional sample-rate conversion library" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Version: 0.1.3" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Libs: -L\${libdir} -lsoxr" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Libs.private: -lm" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/soxr.pc
          echo "✅ LibSOXR configured!" | tee -a ../../../logs/success/libsoxr_complete.log
        fi
        cd ../..

    - name: Build Advanced Features - ALL Unlocked (Theora, FriBidi, TwoLAME, GSM)
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🆕 Building libogg (dependency for Theora/Vorbis/Speex)..." | tee -a ../logs/external-libs/advanced_features.log
        git clone --depth 1 https://github.com/xiph/ogg.git
        cd ogg
        ./autogen.sh 2>&1 | tee -a ../../logs/build/ogg_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --with-pic 2>&1 | tee -a ../../logs/configure/ogg_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/ogg_build.log
        make install 2>&1 | tee -a ../../logs/build/ogg_install.log
        cd ..

        echo "🆕 Building libvorbis..." | tee -a ../logs/external-libs/advanced_features.log
        git clone --depth 1 https://github.com/xiph/vorbis.git
        cd vorbis
        ./autogen.sh 2>&1 | tee -a ../../logs/build/vorbis_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-docs --disable-examples 2>&1 | tee -a ../../logs/configure/vorbis_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/vorbis_build.log
        make install 2>&1 | tee -a ../../logs/build/vorbis_install.log
        cd ..

        echo "🆕 Building libtheora (UNLOCKED from ver3)..." | tee -a ../logs/external-libs/advanced_features.log
        git clone --depth 1 https://github.com/xiph/theora.git
        cd theora
        if ! [ -f configure ]; then
          ./autogen.sh 2>&1 | tee -a ../../logs/build/theora_autogen.log
        fi
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-doc --disable-spec \
          --disable-examples --disable-oggtest --disable-vorbistest \
          --disable-sdltest --disable-asm --with-pic \
          --with-ogg=$PREFIX --with-vorbis=$PREFIX \
          CFLAGS="$CFLAGS -DANDROID -fno-strict-aliasing" 2>&1 | tee -a ../../logs/configure/theora_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../logs/build/theora_build.log; then
          echo "✅ Theora parallel build succeeded" | tee -a ../../logs/success/theora.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/theora_parallel_failed.log
          make clean
          make V=1 2>&1 | tee -a ../../logs/build/theora_single_build.log || echo "❌ Theora build failed" | tee -a ../../logs/errors/theora_failed.log
        fi
        make install 2>&1 | tee -a ../../logs/build/theora_install.log
        cd ..

        echo "🆕 Building libspeex..." | tee -a ../logs/external-libs/advanced_features.log
        git clone --depth 1 https://github.com/xiph/speex.git
        cd speex
        ./autogen.sh 2>&1 | tee -a ../../logs/build/speex_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-oggtest --disable-binaries 2>&1 | tee -a ../../logs/configure/speex_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/speex_build.log
        make install 2>&1 | tee -a ../../logs/build/speex_install.log
        cd ..

        echo "🆕 Building FriBidi (UNLOCKED from ver2)..." | tee -a ../logs/external-libs/advanced_features.log
        if ! wget -q https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz; then
          echo "Download failed, using git clone..." | tee -a ../../logs/build/fribidi_fallback.log
          git clone --depth 1 https://github.com/fribidi/fribidi.git
          cd fribidi
          ./autogen.sh 2>&1 | tee -a ../../logs/build/fribidi_autogen.log
        else
          tar xJf fribidi-1.0.13.tar.xz
          cd fribidi-1.0.13
        fi

        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-docs --disable-debug \
          --with-pic --disable-deprecated \
          CFLAGS="$CFLAGS -DFRIBIDI_NO_DEPRECATED=1" \
          CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" 2>&1 | tee -a ../../logs/configure/fribidi_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../logs/build/fribidi_build.log; then
          echo "✅ FriBidi parallel build succeeded" | tee -a ../../logs/success/fribidi.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/fribidi_parallel_failed.log
          make clean
          make V=1 2>&1 | tee -a ../../logs/build/fribidi_single_build.log || echo "❌ FriBidi build failed" | tee -a ../../logs/errors/fribidi_failed.log
        fi
        make install 2>&1 | tee -a ../../logs/build/fribidi_install.log

        if [ -f "$PREFIX/lib/libfribidi.a" ]; then
          echo "✅ FriBidi library: $(du -sh $PREFIX/lib/libfribidi.a | cut -f1)" | tee -a ../../logs/success/fribidi_complete.log
        else
          echo "❌ FriBidi build failed!" | tee -a ../../logs/errors/fribidi_library_missing.log
        fi
        cd ..

        echo "🆕 Building TwoLAME (UNLOCKED from ver4)..." | tee -a ../logs/external-libs/advanced_features.log
        wget -q https://downloads.sourceforge.net/project/twolame/twolame/0.4.0/twolame-0.4.0.tar.gz
        tar xzf twolame-0.4.0.tar.gz
        cd twolame-0.4.0

        # Fix restrict keyword compatibility
        sed -i 's/restrict/__restrict/g' libtwolame/bitbuffer.c || true
        sed -i 's/restrict/__restrict/g' libtwolame/bitbuffer.h || true
        find . -name "*.c" -exec sed -i 's/restrict/__restrict/g' {} \; || true
        find . -name "*.h" -exec sed -i 's/restrict/__restrict/g' {} \; || true

        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-sndfile \
          --with-pic CFLAGS="$CFLAGS -DHAVE_CONFIG_H -Wno-unused-function" 2>&1 | tee -a ../../logs/configure/twolame_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../logs/build/twolame_build.log; then
          echo "✅ TwoLAME parallel build succeeded" | tee -a ../../logs/success/twolame.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/twolame_parallel_failed.log
          make clean
          make V=1 2>&1 | tee -a ../../logs/build/twolame_single_build.log || echo "❌ TwoLAME build failed" | tee -a ../../logs/errors/twolame_failed.log
        fi
        make install 2>&1 | tee -a ../../logs/build/twolame_install.log

        if [ -f "$PREFIX/lib/libtwolame.a" ]; then
          echo "✅ TwoLAME library: $(du -sh $PREFIX/lib/libtwolame.a | cut -f1)" | tee -a ../../logs/success/twolame_complete.log
        else
          echo "❌ TwoLAME build failed!" | tee -a ../../logs/errors/twolame_library_missing.log
        fi
        cd ..

        echo "🆕 Building GSM (UNLOCKED from ver1)..." | tee -a ../logs/external-libs/advanced_features.log
        wget -q http://www.quut.com/gsm/gsm-1.0.22.tar.gz
        tar xzf gsm-1.0.22.tar.gz
        cd gsm-1.0-pl22

        # Fix Makefile for cross-compilation
        sed -i 's|^INSTALL_ROOT.*|INSTALL_ROOT = $(PREFIX)|' Makefile
        sed -i 's|/usr/local|$(PREFIX)|g' Makefile
        sed -i 's|CC.*=.*gcc|CC = $(CC)|' Makefile
        sed -i 's|AR.*=.*ar|AR = $(AR)|' Makefile
        sed -i 's|RANLIB.*=.*ranlib|RANLIB = $(RANLIB)|' Makefile

        export ANDROID_CC=$CC
        export ANDROID_AR=$AR
        export ANDROID_RANLIB=$RANLIB

        make clean 2>/dev/null || true
        if ! make INSTALL_ROOT=$PREFIX CC=$CC AR=$AR RANLIB=$RANLIB \
             CCFLAGS="-c $CFLAGS -DANDROID -DNeedFunctionPrototypes=1 -fPIC" \
             -j$(nproc) 2>&1 | tee -a ../../logs/build/gsm_build.log; then
          echo "Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/gsm_parallel_failed.log
          make clean 2>/dev/null || true
          make INSTALL_ROOT=$PREFIX CC=$CC AR=$AR RANLIB=$RANLIB \
               CCFLAGS="-c $CFLAGS -DANDROID -DNeedFunctionPrototypes=1 -fPIC" 2>&1 | tee -a ../../logs/build/gsm_single_build.log
        fi

        echo "Installing GSM library..." | tee -a ../../logs/build/gsm_install.log
        cp lib/libgsm.a $PREFIX/lib/ 2>&1 | tee -a ../../logs/build/gsm_manual_install.log || {
          echo "libgsm.a not found in lib, checking other locations..." | tee -a ../../logs/errors/gsm_location_check.log
          find . -name "libgsm.a" -exec cp {} $PREFIX/lib/ \; 2>&1 | tee -a ../../logs/build/gsm_find_install.log
        }
        cp inc/gsm.h $PREFIX/include/ 2>/dev/null || cp inc/gsm.h $PREFIX/inc/ 2>/dev/null || true

        # Create pkg-config file
        echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/gsm.pc
        echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "Name: GSM" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "Description: GSM 06.10 lossy speech compression library" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "Version: 1.0.22" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "Libs: -L\${libdir} -lgsm" >> $PREFIX/lib/pkgconfig/gsm.pc
        echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/gsm.pc

        if [ -f "$PREFIX/lib/libgsm.a" ]; then
          echo "✅ GSM library: $(du -sh $PREFIX/lib/libgsm.a | cut -f1)" | tee -a ../../logs/success/gsm_complete.log
        else
          echo "❌ GSM build failed!" | tee -a ../../logs/errors/gsm_library_missing.log
        fi
        cd ..

    - name: "Build LibASS Dependencies (Two-stage build to fix circular dependency)"
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🔥 NEW: Building FreeType2 WITHOUT HarfBuzz (stage 1)..." | tee -a ../logs/external-libs/libass_deps.log
        if [ ! -f "$PREFIX/lib/libfreetype.a" ]; then
          echo "FreeType not found, rebuilding without HarfBuzz..." | tee -a ../logs/external-libs/libass_deps.log
          rm -rf freetype-2.13.2
          wget -q https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.gz
          tar xzf freetype-2.13.2.tar.gz
          cd freetype-2.13.2
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --without-harfbuzz --without-brotli \
            --with-pic 2>&1 | tee -a ../../logs/configure/freetype_stage1_config.log
          make -j$(nproc) 2>&1 | tee -a ../../logs/build/freetype_stage1_build.log
          make install 2>&1 | tee -a ../../logs/build/freetype_stage1_install.log
          echo "✅ FreeType2 stage 1 (without HarfBuzz) completed" | tee -a ../../logs/success/freetype_stage1.log
          cd ..
        fi

        echo "🔥 NEW: Building HarfBuzz WITH FreeType2 (stage 2)..." | tee -a ../logs/external-libs/libass_deps.log
        git clone --depth 1 https://github.com/harfbuzz/harfbuzz.git
        cd harfbuzz
        ./autogen.sh 2>&1 | tee -a ../../logs/build/harfbuzz_autogen.log || {
          echo "autogen.sh failed, trying meson directly..." | tee -a ../../logs/build/harfbuzz_fallback.log
          meson setup build_android \
            --cross-file=/dev/stdin <<< "[binaries]
c = '$CC'
cpp = '$CXX'  
ar = '$AR'
strip = '$STRIP'
pkgconfig = 'pkg-config'

[host_machine]
system = 'linux'
cpu_family = 'arm'
cpu = 'armv7'
endian = 'little'

[properties]
sys_root = '$SYSROOT'
pkg_config_path = '$PKG_CONFIG_PATH'
c_args = ['-fPIC', '-DANDROID', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=neon', '-mthumb', '-Os', '-ffunction-sections', '-fdata-sections', '-std=c99', '-I$PREFIX/include']
cpp_args = ['-fPIC', '-DANDROID', '-march=armv7-a', '-mfloat-abi=softfp', '-mfpu=neon', '-mthumb', '-Os', '-ffunction-sections', '-fdata-sections', '-std=c++11', '-I$PREFIX/include']
c_link_args = ['-L$PREFIX/lib', '-Wl,--gc-sections']
cpp_link_args = ['-L$PREFIX/lib', '-Wl,--gc-sections']" \
            --prefix=$PREFIX \
            --default-library=static \
            --buildtype=release \
            -Dfreetype=enabled \
            -Dglib=disabled \
            -Dgobject=disabled \
            -Dcairo=disabled \
            -Dicu=disabled \
            -Dgraphite=disabled \
            -Dtests=disabled \
            -Dintrospection=disabled \
            -Ddocs=disabled \
            -Dbenchmark=disabled 2>&1 | tee -a ../../logs/configure/harfbuzz_meson_config.log

          cd build_android
          if ninja 2>&1 | tee -a ../../../logs/build/harfbuzz_build.log; then
            ninja install 2>&1 | tee -a ../../../logs/build/harfbuzz_install.log
            echo "✅ HarfBuzz built successfully with Meson" | tee -a ../../../logs/success/harfbuzz.log
          else
            echo "❌ HarfBuzz build failed" | tee -a ../../../logs/errors/harfbuzz_failed.log
          fi
          cd ..
        }
        cd ..

        echo "🔥 NEW: Rebuilding FreeType2 WITH HarfBuzz (stage 3)..." | tee -a ../logs/external-libs/libass_deps.log
        if [ -f "$PREFIX/lib/libharfbuzz.a" ]; then
          cd freetype-2.13.2
          make clean
          ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
            --disable-shared --enable-static --with-harfbuzz --without-brotli \
            --with-pic 2>&1 | tee -a ../../logs/configure/freetype_stage2_config.log
          make -j$(nproc) 2>&1 | tee -a ../../logs/build/freetype_stage2_build.log
          make install 2>&1 | tee -a ../../logs/build/freetype_stage2_install.log
          echo "✅ FreeType2 stage 2 (with HarfBuzz) completed" | tee -a ../../logs/success/freetype_stage2.log
          cd ..
        else
          echo "⚠️ HarfBuzz not found, keeping FreeType2 without HarfBuzz" | tee -a ../../logs/build/freetype_fallback.log
        fi

        echo "🔥 NEW: Building FontConfig..." | tee -a ../logs/external-libs/libass_deps.log
        wget -q https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.14.2.tar.xz
        tar xJf fontconfig-2.14.2.tar.xz
        cd fontconfig-2.14.2
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-docs \
          --with-freetype-config=$PREFIX/bin/freetype-config \
          FREETYPE_CFLAGS="-I$PREFIX/include/freetype2" \
          FREETYPE_LIBS="-L$PREFIX/lib -lfreetype" 2>&1 | tee -a ../../logs/configure/fontconfig_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/fontconfig_build.log || {
          echo "Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/fontconfig_parallel_failed.log
          make clean
          make 2>&1 | tee -a ../../logs/build/fontconfig_single_build.log
        }
        make install 2>&1 | tee -a ../../logs/build/fontconfig_install.log
        cd ..

        if [ -f "$PREFIX/lib/libfontconfig.a" ]; then
          echo "✅ FontConfig library: $(du -sh $PREFIX/lib/libfontconfig.a | cut -f1)" | tee -a ../../logs/success/fontconfig_complete.log
        else
          echo "❌ FontConfig build failed!" | tee -a ../../logs/errors/fontconfig_library_missing.log
        fi

    - name: "Build LibASS (UNLOCKED with comprehensive fixes)"
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "🔥 NEW: Building LibASS with FULL DEPENDENCY SUPPORT..." | tee -a ../logs/external-libs/libass.log
        git clone --depth 1 https://github.com/libass/libass.git
        cd libass

        ./autogen.sh 2>&1 | tee -a ../../logs/build/libass_autogen.log || {
          echo "autogen.sh not found, trying direct configure..." | tee -a ../../logs/build/libass_fallback.log
        }

        # Check what dependencies are available
        HARFBUZZ_SUPPORT="--disable-harfbuzz"
        FONTCONFIG_SUPPORT="--disable-fontconfig"
        FREETYPE_SUPPORT="--disable-freetype"

        if [ -f "$PREFIX/lib/libharfbuzz.a" ]; then
          echo "✅ HarfBuzz found, enabling..." | tee -a ../../logs/build/libass_deps_check.log
          HARFBUZZ_SUPPORT="--enable-harfbuzz"
        fi

        if [ -f "$PREFIX/lib/libfontconfig.a" ]; then
          echo "✅ FontConfig found, enabling..." | tee -a ../../logs/build/libass_deps_check.log
          FONTCONFIG_SUPPORT="--enable-fontconfig"
        fi

        if [ -f "$PREFIX/lib/libfreetype.a" ]; then
          echo "✅ FreeType2 found, enabling..." | tee -a ../../logs/build/libass_deps_check.log
          FREETYPE_SUPPORT="--enable-freetype"
        fi

        echo "LibASS configuration: HB=$HARFBUZZ_SUPPORT FC=$FONTCONFIG_SUPPORT FT=$FREETYPE_SUPPORT" | tee -a ../../logs/build/libass_config_summary.log

        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static \
          --with-pic \
          $HARFBUZZ_SUPPORT \
          $FONTCONFIG_SUPPORT \
          $FREETYPE_SUPPORT \
          --require-system-font-provider=false \
          CFLAGS="$CFLAGS" \
          CPPFLAGS="$CPPFLAGS" \
          LDFLAGS="$LDFLAGS" 2>&1 | tee -a ../../logs/configure/libass_config.log

        if make -j$(nproc) V=1 2>&1 | tee -a ../../logs/build/libass_build.log; then
          echo "✅ LibASS parallel build succeeded" | tee -a ../../logs/success/libass.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../../logs/errors/libass_parallel_failed.log
          make clean
          if make V=1 2>&1 | tee -a ../../logs/build/libass_single_build.log; then
            echo "✅ LibASS single-threaded build succeeded" | tee -a ../../logs/success/libass.log
          else
            echo "⚠️ Build failed with full deps, trying minimal config..." | tee -a ../../logs/errors/libass_single_failed.log
            make clean
            ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
              --disable-shared --enable-static --with-pic \
              --disable-harfbuzz --disable-fontconfig --disable-freetype \
              --require-system-font-provider=false \
              CFLAGS="$CFLAGS" CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" 2>&1 | tee -a ../../logs/configure/libass_minimal_config.log
            make V=1 2>&1 | tee -a ../../logs/build/libass_minimal_build.log || echo "❌ LibASS build failed completely" | tee -a ../../logs/errors/libass_complete_failure.log
          fi
        fi

        if make install 2>/dev/null; then
          echo "✅ LibASS installation successful" | tee -a ../../logs/success/libass_install.log
        else
          echo "⚠️ Manual installation..." | tee -a ../../logs/errors/libass_install_failed.log
          mkdir -p $PREFIX/lib $PREFIX/include
          if [ -f ".libs/libass.a" ]; then
            cp .libs/libass.a $PREFIX/lib/ && echo "✅ Library copied" | tee -a ../../logs/success/libass_manual.log
          elif [ -f "libass/.libs/libass.a" ]; then
            cp libass/.libs/libass.a $PREFIX/lib/ && echo "✅ Library found and copied" | tee -a ../../logs/success/libass_manual.log
          elif find . -name "libass.a" -exec cp {} $PREFIX/lib/ \; 2>/dev/null; then
            echo "✅ Library found via search and copied" | tee -a ../../logs/success/libass_manual.log
          fi
          if [ -f "libass/ass.h" ]; then
            cp libass/ass.h $PREFIX/include/
          fi
        fi

        # Create pkg-config file if library exists
        if [ -f "$PREFIX/lib/libass.a" ]; then
          echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/libass.pc
          echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "Name: libass" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "Description: Subtitle rendering library for the ASS/SSA format" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "Version: 0.17.0" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "Libs: -L\${libdir} -lass" >> $PREFIX/lib/pkgconfig/libass.pc
          if [ -f "$PREFIX/lib/libharfbuzz.a" ]; then
            echo "Libs.private: -lharfbuzz -lfreetype -lfontconfig -lm" >> $PREFIX/lib/pkgconfig/libass.pc
          else
            echo "Libs.private: -lfreetype -lm" >> $PREFIX/lib/pkgconfig/libass.pc
          fi
          echo "Cflags: -I\${includedir}" >> $PREFIX/lib/pkgconfig/libass.pc
          echo "✅ LibASS library: $(du -sh $PREFIX/lib/libass.a | cut -f1)" | tee -a ../../logs/success/libass_complete.log
        else
          echo "❌ LibASS build failed!" | tee -a ../../logs/errors/libass_library_missing.log
        fi
        cd ..

    - name: Build Image & Font Libraries (Enhanced)
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd external
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export BUILD_HOST=x86_64-pc-linux-gnu
        export TARGET_HOST=arm-linux-androideabi
        export CFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c99"
        export CXXFLAGS="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -std=c++11"
        export CPPFLAGS="-I$PREFIX/include"
        export LDFLAGS="-L$PREFIX/lib -Wl,--gc-sections"
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        echo "Building webp..." | tee -a ../logs/external-libs/image_libraries.log
        git clone --depth 1 https://chromium.googlesource.com/webm/libwebp.git
        cd libwebp
        ./autogen.sh 2>&1 | tee -a ../../logs/build/webp_autogen.log
        ./configure --host=$TARGET_HOST --build=$BUILD_HOST --prefix=$PREFIX \
          --disable-shared --enable-static --disable-gl --disable-sdl \
          --disable-png --disable-jpeg --disable-tiff --disable-gif 2>&1 | tee -a ../../logs/configure/webp_config.log
        make -j$(nproc) 2>&1 | tee -a ../../logs/build/webp_build.log
        make install 2>&1 | tee -a ../../logs/build/webp_install.log
        cd ..

        echo "Building openjpeg..." | tee -a ../logs/external-libs/image_libraries.log
        git clone --depth 1 https://github.com/uclouvain/openjpeg.git
        cd openjpeg
        mkdir -p build_android
        cd build_android
        cmake -G "Unix Makefiles" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
          -DBUILD_SHARED_LIBS=OFF -DBUILD_CODEC=OFF \
          -DCMAKE_C_FLAGS="$CFLAGS" .. 2>&1 | tee -a ../../../logs/configure/openjpeg_config.log
        make -j$(nproc) 2>&1 | tee -a ../../../logs/build/openjpeg_build.log
        make install 2>&1 | tee -a ../../../logs/build/openjpeg_install.log

        # Create pkg-config file
        echo "prefix=$PREFIX" > $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "exec_prefix=\${prefix}" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "libdir=\${exec_prefix}/lib" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "includedir=\${prefix}/include" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "Name: openjp2" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "Description: JPEG 2000 codec library" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "Version: 2.5.0" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "Libs: -L\${libdir} -lopenjp2" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        echo "Cflags: -I\${includedir}/openjpeg-2.5" >> $PREFIX/lib/pkgconfig/libopenjp2.pc
        cd ../..

    - name: Library Status Check  
      if: steps.cache-external.outputs.cache-hit != 'true'
      run: |
        cd build/external
        echo "📊 Library Status Check (ver8.2 + LibASS):" | tee -a ../../logs/build_info.txt
        echo "=======================================" | tee -a ../../logs/build_info.txt

        echo "🔥 NEW FEATURE IN VER8.2:" | tee -a ../../logs/build_info.txt
        LIBASS_STATUS="❌ Missing"
        if [ -f "lib/libass.a" ]; then
          LIBASS_STATUS="✅ $(du -sh lib/libass.a | cut -f1)"
        fi
        echo "- LibASS: $LIBASS_STATUS" | tee -a ../../logs/build_info.txt

        echo "" | tee -a ../../logs/build_info.txt
        echo "🎯 ALL FEATURES FROM VER8:" | tee -a ../../logs/build_info.txt

        THEORA_STATUS="❌ Missing"  
        if [ -f "lib/libtheora.a" ]; then
          THEORA_STATUS="✅ $(du -sh lib/libtheora.a | cut -f1)"
        fi
        echo "- Theora: $THEORA_STATUS" | tee -a ../../logs/build_info.txt

        FRIBIDI_STATUS="❌ Missing"
        if [ -f "lib/libfribidi.a" ]; then
          FRIBIDI_STATUS="✅ $(du -sh lib/libfribidi.a | cut -f1)"
        fi
        echo "- FriBidi: $FRIBIDI_STATUS" | tee -a ../../logs/build_info.txt

        TWOLAME_STATUS="❌ Missing"
        if [ -f "lib/libtwolame.a" ]; then
          TWOLAME_STATUS="✅ $(du -sh lib/libtwolame.a | cut -f1)"
        fi
        echo "- TwoLAME: $TWOLAME_STATUS" | tee -a ../../logs/build_info.txt

        GSM_STATUS="❌ Missing"
        if [ -f "lib/libgsm.a" ]; then
          GSM_STATUS="✅ $(du -sh lib/libgsm.a | cut -f1)"
        fi
        echo "- GSM: $GSM_STATUS" | tee -a ../../logs/build_info.txt

        echo "" | tee -a ../../logs/build_info.txt
        echo "📦 ALL PREVIOUS FEATURES:" | tee -a ../../logs/build_info.txt

        LIBAOM_STATUS="❌ Missing"
        if [ -f "lib/libaom.a" ]; then
          LIBAOM_STATUS="✅ $(du -sh lib/libaom.a | cut -f1)"
        fi
        echo "- LibAV1: $LIBAOM_STATUS (from ver6)" | tee -a ../../logs/build_info.txt

        SOXR_STATUS="❌ Missing"
        if [ -f "lib/libsoxr.a" ]; then
          SOXR_STATUS="✅ $(du -sh lib/libsoxr.a | cut -f1)"
        fi
        echo "- LibSOXR: $SOXR_STATUS (from ver7)" | tee -a ../../logs/build_info.txt

        FDK_AAC_STATUS="❌ Missing"
        if [ -f "lib/libfdk-aac.a" ]; then
          FDK_AAC_STATUS="✅ $(du -sh lib/libfdk-aac.a | cut -f1)"
        fi
        echo "- FDK-AAC: $FDK_AAC_STATUS (from ver5)" | tee -a ../../logs/build_info.txt

        echo "" | tee -a ../../logs/build_info.txt
        echo "Total libraries: $(ls lib/*.a 2>/dev/null | wc -l)" | tee -a ../../logs/build_info.txt

        # Export status for FFmpeg configuration
        echo "LIBASS_STATUS=$LIBASS_STATUS" >> ../../build_status.env
        echo "THEORA_STATUS=$THEORA_STATUS" >> ../../build_status.env
        echo "FRIBIDI_STATUS=$FRIBIDI_STATUS" >> ../../build_status.env
        echo "TWOLAME_STATUS=$TWOLAME_STATUS" >> ../../build_status.env
        echo "GSM_STATUS=$GSM_STATUS" >> ../../build_status.env
        echo "LIBAOM_STATUS=$LIBAOM_STATUS" >> ../../build_status.env
        echo "SOXR_STATUS=$SOXR_STATUS" >> ../../build_status.env
        echo "FDK_AAC_STATUS=$FDK_AAC_STATUS" >> ../../build_status.env

    - name: Clone FFmpeg
      run: |
        git clone --depth 1 --branch ${{ env.FFMPEG_VERSION }} https://git.ffmpeg.org/ffmpeg.git ffmpeg
        cd ffmpeg

        echo "Applying Android compatibility patches..." | tee -a ../logs/build/ffmpeg_patches.log
        sed -i 's/__builtin_assume_aligned//g' libavutil/mem.c || true
        sed -i 's/HAVE_BUILTIN_ASSUME_ALIGNED 1/HAVE_BUILTIN_ASSUME_ALIGNED 0/g' libavutil/mem.c || true
        find . -name "*.c" -exec sed -i 's/__restrict/restrict/g' {} \; || true
        find . -name "*.h" -exec sed -i 's/__restrict/restrict/g' {} \; || true

        if [ -f VERSION ]; then
          echo "FFmpeg version: $(cat VERSION)" | tee -a ../logs/build_info.txt
        else
          echo "FFmpeg version: ${{ env.FFMPEG_VERSION }}" | tee -a ../logs/build_info.txt
        fi

    - name: Create Build Directories
      run: |
        mkdir -p build/armeabi-v7a output/armeabi-v7a release

    - name: Configure FFmpeg with ALL Features + LibASS (ver8.2)
      run: |
        cd ffmpeg
        export ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}
        export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
        export CC=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang
        export CXX=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21-clang++
        export AR=$TOOLCHAIN_PATH/bin/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/bin/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/bin/llvm-strip
        export SYSROOT=$TOOLCHAIN_PATH/sysroot
        export PREFIX=$(pwd)/../build/external
        export PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
        export PATH=$TOOLCHAIN_PATH/bin:$PATH

        source ../build_status.env

        echo "🔥 Configuring FFmpeg with ALL features + LibASS (ver8.2)..." | tee -a ../logs/configure/ffmpeg_configure_start.log

        ./configure \
          --prefix=../output/armeabi-v7a \
          --cross-prefix=$TOOLCHAIN_PATH/bin/armv7a-linux-androideabi21- \
          --arch=arm --cpu=armv7-a --target-os=android \
          --sysroot=$SYSROOT \
          --enable-cross-compile \
          --enable-static --disable-shared \
          --disable-debug --enable-optimizations \
          --enable-small \
          --disable-programs --disable-doc \
          --disable-avdevice --disable-swscale-alpha \
          --enable-gpl --enable-version3 --enable-nonfree \
          --enable-libx264 --enable-encoder=libx264 \
          --enable-libx265 --enable-encoder=libx265 \
          --enable-libvpx --enable-encoder=libvpx_vp8 --enable-encoder=libvpx_vp9 \
          --enable-decoder=libvpx_vp8 --enable-decoder=libvpx_vp9 \
          $([ "$LIBAOM_STATUS" != "❌ Missing" ] && echo "--enable-libaom --enable-encoder=libaov_av1 --enable-decoder=libaov_av1") \
          $([ "$FDK_AAC_STATUS" != "❌ Missing" ] && echo "--enable-libfdk-aac --enable-encoder=libfdk_aac") \
          --enable-libopus --enable-encoder=libopus --enable-decoder=libopus \
          --enable-libmp3lame --enable-encoder=libmp3lame \
          $([ "$SOXR_STATUS" != "❌ Missing" ] && echo "--enable-libsoxr") \
          $([ "$THEORA_STATUS" != "❌ Missing" ] && echo "--enable-libtheora --enable-encoder=libtheora --enable-decoder=libtheora") \
          $([ "$FRIBIDI_STATUS" != "❌ Missing" ] && echo "--enable-libfribidi") \
          $([ "$TWOLAME_STATUS" != "❌ Missing" ] && echo "--enable-libtwolame --enable-encoder=libtwolame") \
          $([ "$GSM_STATUS" != "❌ Missing" ] && echo "--enable-libgsm --enable-encoder=libgsm --enable-decoder=libgsm") \
          $([ "$LIBASS_STATUS" != "❌ Missing" ] && echo "--enable-libass") \
          --enable-libvorbis --enable-encoder=libvorbis --enable-decoder=libvorbis \
          --enable-libspeex --enable-encoder=libspeex --enable-decoder=libspeex \
          --enable-libwebp --enable-encoder=libwebp \
          --enable-libfreetype \
          --enable-libopenjpeg --enable-encoder=libopenjpeg --enable-decoder=libopenjpeg \
          --enable-zlib --enable-bzlib --enable-lzma \
          --extra-cflags="-fPIC -DANDROID -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb -Os -ffunction-sections -fdata-sections -I$PREFIX/include" \
          --extra-ldflags="-L$PREFIX/lib -Wl,--gc-sections -static-libgcc" \
          --extra-libs="-lm -ldl -llog" \
          --pkg-config-flags="--static" 2>&1 | tee ../logs/configure/ffmpeg_config.log

        if [ $? -eq 0 ]; then
          echo "✅ FFmpeg configuration successful!" | tee -a ../logs/success/ffmpeg_configure.log
          echo "Configuration completed at: $(date)" | tee -a ../logs/configure/ffmpeg_configure_end.log
        else
          echo "❌ FFmpeg configuration failed!" | tee -a ../logs/errors/ffmpeg_configure_failed.log
          echo "Configuration log:" | tee -a ../logs/errors/ffmpeg_configure_failed.log
          tail -50 config.log | tee -a ../logs/errors/ffmpeg_configure_failed.log
          exit 1
        fi

    - name: Build FFmpeg
      run: |
        cd ffmpeg
        echo "🔨 Building FFmpeg with ALL features + LibASS..." | tee -a ../logs/build/ffmpeg_build_start.log
        
        if make -j$(nproc) 2>&1 | tee ../logs/build/ffmpeg_parallel_build.log; then
          echo "✅ FFmpeg parallel build successful!" | tee -a ../logs/success/ffmpeg_parallel_build.log
        else
          echo "⚠️ Parallel build failed, trying single-threaded..." | tee -a ../logs/errors/ffmpeg_parallel_failed.log
          make clean
          if make 2>&1 | tee ../logs/build/ffmpeg_single_build.log; then
            echo "✅ FFmpeg single-threaded build successful!" | tee -a ../logs/success/ffmpeg_single_build.log
          else
            echo "❌ FFmpeg build failed completely!" | tee -a ../logs/errors/ffmpeg_build_failed.log
            exit 1
          fi
        fi
        echo "Build completed at: $(date)" | tee -a ../logs/build/ffmpeg_build_end.log

    - name: Install and Package
      run: |
        cd ffmpeg
        make install 2>&1 | tee ../logs/build/ffmpeg_install.log

        echo "📦 Packaging FFmpeg..." | tee -a ../logs/build/ffmpeg_package.log
        cd ../output/armeabi-v7a

        if [ -f "bin/ffmpeg" ]; then
          cp bin/ffmpeg ../../release/
          echo "✅ FFmpeg binary: $(du -sh ../../release/ffmpeg | cut -f1)" | tee -a ../../logs/success/ffmpeg_package.log
        else
          echo "❌ FFmpeg binary not found!" | tee -a ../../logs/errors/ffmpeg_binary_missing.log
          exit 1
        fi

        cd ../../
        source build_status.env

        echo "FFmpeg Android COMPLETE Build (ver8.2 + LibASS UNLOCKED)" > release/BUILD_INFO.txt
        echo "==========================================================" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "🔥 NEW FEATURE UNLOCKED IN VER8.2:" >> release/BUILD_INFO.txt
        echo "- LibASS (subtitle rendering): $LIBASS_STATUS" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "🎯 ALL FEATURES FROM VER8:" >> release/BUILD_INFO.txt
        echo "- Theora (libtheora): $THEORA_STATUS" >> release/BUILD_INFO.txt
        echo "- FriBidi (bidirectional text): $FRIBIDI_STATUS" >> release/BUILD_INFO.txt
        echo "- TwoLAME (MP2 encoder): $TWOLAME_STATUS" >> release/BUILD_INFO.txt
        echo "- GSM (speech codec): $GSM_STATUS" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "📦 ALL PREVIOUS FEATURES INCLUDED:" >> release/BUILD_INFO.txt
        echo "- LibAV1 (AV1 codec): $LIBAOM_STATUS (from ver6)" >> release/BUILD_INFO.txt
        echo "- LibSOXR (resampling): $SOXR_STATUS (from ver7)" >> release/BUILD_INFO.txt
        echo "- FDK-AAC (AAC encoder): $FDK_AAC_STATUS (from ver5)" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "Version: ${{ env.FFMPEG_VERSION }}" >> release/BUILD_INFO.txt
        echo "Target: ${{ env.ANDROID_ABI }}" >> release/BUILD_INFO.txt
        echo "API Level: ${{ env.ANDROID_API_LEVEL }}" >> release/BUILD_INFO.txt
        echo "NDK: ${{ env.NDK_VERSION }}" >> release/BUILD_INFO.txt
        echo "Built: $(date)" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "📺 Video Codecs:" >> release/BUILD_INFO.txt
        echo "- H.264 (libx264)" >> release/BUILD_INFO.txt
        echo "- H.265/HEVC (libx265)" >> release/BUILD_INFO.txt
        echo "- VP8/VP9 (libvpx)" >> release/BUILD_INFO.txt
        echo "- AV1 (libaom) - $LIBAOM_STATUS" >> release/BUILD_INFO.txt
        echo "- Theora (libtheora) - $THEORA_STATUS" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "🎵 Audio Codecs:" >> release/BUILD_INFO.txt
        echo "- AAC (FDK-AAC) - $FDK_AAC_STATUS" >> release/BUILD_INFO.txt
        echo "- MP3 (LAME)" >> release/BUILD_INFO.txt
        echo "- MP2 (TwoLAME) - $TWOLAME_STATUS" >> release/BUILD_INFO.txt
        echo "- Opus" >> release/BUILD_INFO.txt
        echo "- Vorbis" >> release/BUILD_INFO.txt
        echo "- Speex" >> release/BUILD_INFO.txt
        echo "- GSM - $GSM_STATUS" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "🔧 Audio Processing:" >> release/BUILD_INFO.txt
        echo "- LibSOXR (High-quality resampling) - $SOXR_STATUS" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "📄 Text & Subtitles:" >> release/BUILD_INFO.txt
        echo "- LibASS (ASS/SSA subtitles) - $LIBASS_STATUS" >> release/BUILD_INFO.txt
        echo "- FriBidi (bidirectional text) - $FRIBIDI_STATUS" >> release/BUILD_INFO.txt
        echo "- WebP images" >> release/BUILD_INFO.txt
        echo "- JPEG 2000 (OpenJPEG)" >> release/BUILD_INFO.txt
        echo "- Font rendering (FreeType)" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "🗜️ Compression:" >> release/BUILD_INFO.txt
        echo "- zlib, bzip2, lzma" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "📦 Container Formats:" >> release/BUILD_INFO.txt
        echo "- MP4, MOV, MKV, WebM, AVI, 3GP, OGG, OGV" >> release/BUILD_INFO.txt
        echo "" >> release/BUILD_INFO.txt
        echo "✅ ALL LIBRARIES + LIBASS SUBTITLE SUPPORT SUCCESSFULLY UNLOCKED!" >> release/BUILD_INFO.txt

    - name: Upload Enhanced Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-complete-libass-unlocked-ver8.2
        path: logs/
        retention-days: 7

    - name: Upload Complete Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-android-complete-libass-unlocked-ver8.2
        path: release/
        retention-days: 30

    - name: Complete Build Summary
      run: |
        echo "## 🔥 FFmpeg Android COMPLETE Build (ver8.2 + LibASS UNLOCKED)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "release/ffmpeg" ]; then
          echo "### ✅ BUILD SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Size**: $(du -sh release/ffmpeg | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **All previous features**: ✅ Included" >> $GITHUB_STEP_SUMMARY
          echo "- **NEW Feature (ver8.2)**: 🔥 LibASS (subtitle rendering)" >> $GITHUB_STEP_SUMMARY
          echo "- **From ver8**: 🎯 Theora, FriBidi, TwoLAME, GSM" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Complete Feature Set" >> $GITHUB_STEP_SUMMARY
        echo "- **Video**: H.264, H.265, VP8/9, AV1, Theora" >> $GITHUB_STEP_SUMMARY
        echo "- **Audio**: AAC (FDK), MP3, MP2, Opus, Vorbis, Speex, GSM" >> $GITHUB_STEP_SUMMARY
        echo "- **Audio Processing**: LibSOXR - High-quality resampling" >> $GITHUB_STEP_SUMMARY
        echo "- **Subtitles**: LibASS - ASS/SSA subtitle rendering (NEW)" >> $GITHUB_STEP_SUMMARY
        echo "- **Text**: Bidirectional text support (FriBidi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Images**: WebP, JPEG2000, Font rendering" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Libraries**: 20+ external codecs + LibASS" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    needs: build-ffmpeg-maximum
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Complete Build Status
      run: |
        if [ "${{ needs.build-ffmpeg-maximum.result }}" == "success" ]; then
          echo "🔥 SUCCESS: Complete FFmpeg build with LibASS UNLOCKED!"
          echo "📱 Ready for Android deployment with full subtitle support"
          echo "🆕 VER8.2: LibASS successfully added to all previous features!"
        else
          echo "❌ FAILED: Complete build encountered errors"
          echo "📋 Check build logs for details"
        fi